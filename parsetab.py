
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ABSTRACT BLOCK_COMMENT BOOLEAN BYTE CHAR CHAR_LITERAL CLASS DOUBLE EXTENDS FINAL FLOAT IMPLEMENTS IMPORT INT LINE_COMMENT LONG NAME NUM PACKAGE PRIVATE PROTECTED PUBLIC SHORT STATIC STRING STRING_LITERAL THROWS VOIDstart : package_declaration imports_declaration class_declarationpackage_declaration : PACKAGE NAME ';'imports_declaration : imports_declaration import_declaration\n                   | import_declarationimport_declaration : IMPORT STATIC NAME ';'\n                              | IMPORT STATIC NAME '*' ';'\n                              | IMPORT NAME ';'\n                              | IMPORT NAME '*' ';'class_declaration : modifiers CLASS NAME extends_declaration implement_declarations '{' class_body_elements '}'extends_declaration : EXTENDS NAME\n                               | implement_declarations : IMPLEMENTS interfaces\n                                  | interfaces : NAME ',' interfaces\n                      | NAMEclass_body_elements : class_body_elements class_body_element\n                                | class_body_elementclass_body_element : field_declaration\n                              | method_declaration\n                              | constructor_declaration\n                              | BLOCK_COMMENT\n                              | LINE_COMMENTmethod_declaration : modifiers VOID NAME '(' ')' throws_declaration '{' '}'\n                              | modifiers VOID NAME '(' arguments_declaration ')' throws_declaration '{' '}'\n                              | modifiers NAME NAME '(' ')' throws_declaration '{' '}'\n                              | modifiers NAME NAME '(' arguments_declaration ')' throws_declaration '{' '}'\n                              | modifiers primitive_type NAME '(' ')' throws_declaration '{' '}'\n                              | modifiers primitive_type NAME '(' arguments_declaration ')' throws_declaration '{' '}'throws_declaration : THROWS NAME\n                              | constructor_declaration : modifiers NAME '(' ')' '{' '}'\n                                   | modifiers NAME '(' arguments_declaration ')' '{' '}'arguments_declaration : argument ',' arguments_declaration\n                      | argumentargument : primitive_type NAME\n                    | NAME NAMEfield_declaration : primitive_type_declaration\n                             | list_type_declaration\n                             | having_type_declaration\n                             | array_type_declarationprimitive_type_declaration : modifiers primitive_type NAME ';'list_type_declaration : modifiers NAME '<' NAME '>' NAME ';'having_type_declaration : modifiers NAME NAME ';'array_type_declaration : modifiers primitive_type '[' ']' NAME ';'\n                                  | modifiers primitive_type NAME '[' ']' ';'\n                                  | modifiers NAME '[' ']' NAME ';'\n                                  | modifiers NAME NAME '[' ']' ';'primitive_type : INT\n                          | FLOAT\n                          | SHORT\n                          | CHAR\n                          | STRING\n                          | BYTE\n                          | LONG\n                          | DOUBLE\n                          | BOOLEANmodifiers : modifier\n                     | modifiers modifiermodifier : PUBLIC\n                    | PROTECTED\n                    | PRIVATE\n                    | STATIC\n                    | ABSTRACT\n                    | FINAL\n                    | "
    
_lr_action_items = {'PACKAGE':([0,],[3,]),'$end':([1,8,64,],[0,-1,-9,]),'IMPORT':([2,4,5,9,20,24,27,29,32,],[6,6,-4,-3,-2,-7,-5,-8,-6,]),'NAME':([3,6,11,12,13,14,15,16,17,18,21,22,31,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,69,70,74,75,76,78,82,84,85,86,88,97,99,106,110,111,115,118,119,125,126,129,131,133,135,136,137,],[7,19,-62,-57,-59,-60,-61,-63,-64,23,26,-58,35,38,-65,53,-65,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,38,67,68,72,-48,-49,-50,-51,-52,-53,-54,-55,-56,-16,78,83,78,78,-43,94,98,100,78,-41,104,78,114,121,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'PUBLIC':([4,5,9,10,11,12,13,14,15,16,17,22,24,27,29,32,36,39,40,41,42,43,44,45,46,47,48,49,50,65,76,86,110,111,115,118,119,125,126,129,131,133,135,136,137,],[13,-4,-3,13,-62,-57,-59,-60,-61,-63,-64,-58,-7,-5,-8,-6,13,13,13,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,-43,-41,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'PROTECTED':([4,5,9,10,11,12,13,14,15,16,17,22,24,27,29,32,36,39,40,41,42,43,44,45,46,47,48,49,50,65,76,86,110,111,115,118,119,125,126,129,131,133,135,136,137,],[14,-4,-3,14,-62,-57,-59,-60,-61,-63,-64,-58,-7,-5,-8,-6,14,14,14,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,-43,-41,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'PRIVATE':([4,5,9,10,11,12,13,14,15,16,17,22,24,27,29,32,36,39,40,41,42,43,44,45,46,47,48,49,50,65,76,86,110,111,115,118,119,125,126,129,131,133,135,136,137,],[15,-4,-3,15,-62,-57,-59,-60,-61,-63,-64,-58,-7,-5,-8,-6,15,15,15,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,-43,-41,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'STATIC':([4,5,6,9,10,11,12,13,14,15,16,17,22,24,27,29,32,36,39,40,41,42,43,44,45,46,47,48,49,50,65,76,86,110,111,115,118,119,125,126,129,131,133,135,136,137,],[11,-4,18,-3,11,-62,-57,-59,-60,-61,-63,-64,-58,-7,-5,-8,-6,11,11,11,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,-43,-41,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'ABSTRACT':([4,5,9,10,11,12,13,14,15,16,17,22,24,27,29,32,36,39,40,41,42,43,44,45,46,47,48,49,50,65,76,86,110,111,115,118,119,125,126,129,131,133,135,136,137,],[16,-4,-3,16,-62,-57,-59,-60,-61,-63,-64,-58,-7,-5,-8,-6,16,16,16,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,-43,-41,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'FINAL':([4,5,9,10,11,12,13,14,15,16,17,22,24,27,29,32,36,39,40,41,42,43,44,45,46,47,48,49,50,65,76,86,110,111,115,118,119,125,126,129,131,133,135,136,137,],[17,-4,-3,17,-62,-57,-59,-60,-61,-63,-64,-58,-7,-5,-8,-6,17,17,17,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,-43,-41,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'CLASS':([4,5,9,10,11,12,13,14,15,16,17,22,24,27,29,32,],[-65,-4,-3,21,-62,-57,-59,-60,-61,-63,-64,-58,-7,-5,-8,-6,]),';':([7,19,23,25,28,68,72,93,100,103,104,114,],[20,24,27,29,32,76,86,110,115,118,119,126,]),'VOID':([11,12,13,14,15,16,17,22,36,39,40,41,42,43,44,45,46,47,48,49,50,65,76,86,110,111,115,118,119,125,126,129,131,133,135,136,137,],[-62,-57,-59,-60,-61,-63,-64,-58,-65,52,-65,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,-43,-41,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'INT':([11,12,13,14,15,16,17,22,36,39,40,41,42,43,44,45,46,47,48,49,50,65,69,74,75,76,85,86,97,110,111,115,118,119,125,126,129,131,133,135,136,137,],[-62,-57,-59,-60,-61,-63,-64,-58,-65,55,-65,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,55,55,55,-43,55,-41,55,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'FLOAT':([11,12,13,14,15,16,17,22,36,39,40,41,42,43,44,45,46,47,48,49,50,65,69,74,75,76,85,86,97,110,111,115,118,119,125,126,129,131,133,135,136,137,],[-62,-57,-59,-60,-61,-63,-64,-58,-65,56,-65,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,56,56,56,-43,56,-41,56,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'SHORT':([11,12,13,14,15,16,17,22,36,39,40,41,42,43,44,45,46,47,48,49,50,65,69,74,75,76,85,86,97,110,111,115,118,119,125,126,129,131,133,135,136,137,],[-62,-57,-59,-60,-61,-63,-64,-58,-65,57,-65,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,57,57,57,-43,57,-41,57,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'CHAR':([11,12,13,14,15,16,17,22,36,39,40,41,42,43,44,45,46,47,48,49,50,65,69,74,75,76,85,86,97,110,111,115,118,119,125,126,129,131,133,135,136,137,],[-62,-57,-59,-60,-61,-63,-64,-58,-65,58,-65,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,58,58,58,-43,58,-41,58,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'STRING':([11,12,13,14,15,16,17,22,36,39,40,41,42,43,44,45,46,47,48,49,50,65,69,74,75,76,85,86,97,110,111,115,118,119,125,126,129,131,133,135,136,137,],[-62,-57,-59,-60,-61,-63,-64,-58,-65,59,-65,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,59,59,59,-43,59,-41,59,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'BYTE':([11,12,13,14,15,16,17,22,36,39,40,41,42,43,44,45,46,47,48,49,50,65,69,74,75,76,85,86,97,110,111,115,118,119,125,126,129,131,133,135,136,137,],[-62,-57,-59,-60,-61,-63,-64,-58,-65,60,-65,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,60,60,60,-43,60,-41,60,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'LONG':([11,12,13,14,15,16,17,22,36,39,40,41,42,43,44,45,46,47,48,49,50,65,69,74,75,76,85,86,97,110,111,115,118,119,125,126,129,131,133,135,136,137,],[-62,-57,-59,-60,-61,-63,-64,-58,-65,61,-65,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,61,61,61,-43,61,-41,61,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'DOUBLE':([11,12,13,14,15,16,17,22,36,39,40,41,42,43,44,45,46,47,48,49,50,65,69,74,75,76,85,86,97,110,111,115,118,119,125,126,129,131,133,135,136,137,],[-62,-57,-59,-60,-61,-63,-64,-58,-65,62,-65,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,62,62,62,-43,62,-41,62,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'BOOLEAN':([11,12,13,14,15,16,17,22,36,39,40,41,42,43,44,45,46,47,48,49,50,65,69,74,75,76,85,86,97,110,111,115,118,119,125,126,129,131,133,135,136,137,],[-62,-57,-59,-60,-61,-63,-64,-58,-65,63,-65,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,63,63,63,-43,63,-41,63,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'*':([19,23,],[25,28,]),'EXTENDS':([26,],[31,]),'IMPLEMENTS':([26,30,35,],[-11,34,-10,]),'{':([26,30,33,35,37,38,66,79,89,91,96,101,105,107,108,109,116,117,121,122,124,128,],[-11,-13,36,-10,-12,-15,-14,95,-30,-30,112,-30,120,-30,123,-30,127,-30,-29,130,132,134,]),'BLOCK_COMMENT':([36,40,41,42,43,44,45,46,47,48,49,50,65,76,86,110,111,115,118,119,125,126,129,131,133,135,136,137,],[45,45,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,-43,-41,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),'LINE_COMMENT':([36,40,41,42,43,44,45,46,47,48,49,50,65,76,86,110,111,115,118,119,125,126,129,131,133,135,136,137,],[46,46,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,-43,-41,-47,-31,-46,-45,-44,-32,-42,-23,-25,-27,-24,-26,-28,]),',':([38,81,94,98,],[51,97,-36,-35,]),'}':([40,41,42,43,44,45,46,47,48,49,50,65,76,86,95,110,111,112,115,118,119,120,123,125,126,127,129,130,131,132,133,134,135,136,137,],[64,-17,-18,-19,-20,-21,-22,-37,-38,-39,-40,-16,-43,-41,111,-47,-31,125,-46,-45,-44,129,131,-32,-42,133,-23,135,-25,136,-27,137,-24,-26,-28,]),'(':([53,67,68,72,],[69,74,75,85,]),'<':([53,],[70,]),'[':([53,54,55,56,57,58,59,60,61,62,63,68,72,],[71,73,-48,-49,-50,-51,-52,-53,-54,-55,-56,77,87,]),')':([69,74,75,80,81,85,90,92,94,98,102,113,],[79,89,91,96,-34,101,107,109,-36,-35,117,-33,]),']':([71,73,77,87,],[84,88,93,103,]),'>':([83,],[99,]),'THROWS':([89,91,101,107,109,117,],[106,106,106,106,106,106,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'package_declaration':([0,],[2,]),'imports_declaration':([2,],[4,]),'import_declaration':([2,4,],[5,9,]),'class_declaration':([4,],[8,]),'modifiers':([4,36,40,],[10,39,39,]),'modifier':([4,10,36,39,40,],[12,22,12,22,12,]),'extends_declaration':([26,],[30,]),'implement_declarations':([30,],[33,]),'interfaces':([34,51,],[37,66,]),'class_body_elements':([36,],[40,]),'class_body_element':([36,40,],[41,65,]),'field_declaration':([36,40,],[42,42,]),'method_declaration':([36,40,],[43,43,]),'constructor_declaration':([36,40,],[44,44,]),'primitive_type_declaration':([36,40,],[47,47,]),'list_type_declaration':([36,40,],[48,48,]),'having_type_declaration':([36,40,],[49,49,]),'array_type_declaration':([36,40,],[50,50,]),'primitive_type':([39,69,74,75,85,97,],[54,82,82,82,82,82,]),'arguments_declaration':([69,74,75,85,97,],[80,90,92,102,113,]),'argument':([69,74,75,85,97,],[81,81,81,81,81,]),'throws_declaration':([89,91,101,107,109,117,],[105,108,116,122,124,128,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> package_declaration imports_declaration class_declaration','start',3,'p_start','BasicJavaParser.py',58),
  ('package_declaration -> PACKAGE NAME ;','package_declaration',3,'p_package','BasicJavaParser.py',63),
  ('imports_declaration -> imports_declaration import_declaration','imports_declaration',2,'p_imports','BasicJavaParser.py',67),
  ('imports_declaration -> import_declaration','imports_declaration',1,'p_imports','BasicJavaParser.py',68),
  ('import_declaration -> IMPORT STATIC NAME ;','import_declaration',4,'p_import','BasicJavaParser.py',75),
  ('import_declaration -> IMPORT STATIC NAME * ;','import_declaration',5,'p_import','BasicJavaParser.py',76),
  ('import_declaration -> IMPORT NAME ;','import_declaration',3,'p_import','BasicJavaParser.py',77),
  ('import_declaration -> IMPORT NAME * ;','import_declaration',4,'p_import','BasicJavaParser.py',78),
  ('class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements }','class_declaration',8,'p_class_declaration','BasicJavaParser.py',85),
  ('extends_declaration -> EXTENDS NAME','extends_declaration',2,'p_extends_declaration','BasicJavaParser.py',90),
  ('extends_declaration -> <empty>','extends_declaration',0,'p_extends_declaration','BasicJavaParser.py',91),
  ('implement_declarations -> IMPLEMENTS interfaces','implement_declarations',2,'p_implement_declarations','BasicJavaParser.py',96),
  ('implement_declarations -> <empty>','implement_declarations',0,'p_implement_declarations','BasicJavaParser.py',97),
  ('interfaces -> NAME , interfaces','interfaces',3,'p_interfaces','BasicJavaParser.py',103),
  ('interfaces -> NAME','interfaces',1,'p_interfaces','BasicJavaParser.py',104),
  ('class_body_elements -> class_body_elements class_body_element','class_body_elements',2,'p_class_body_elements','BasicJavaParser.py',111),
  ('class_body_elements -> class_body_element','class_body_elements',1,'p_class_body_elements','BasicJavaParser.py',112),
  ('class_body_element -> field_declaration','class_body_element',1,'p_class_body_element','BasicJavaParser.py',115),
  ('class_body_element -> method_declaration','class_body_element',1,'p_class_body_element','BasicJavaParser.py',116),
  ('class_body_element -> constructor_declaration','class_body_element',1,'p_class_body_element','BasicJavaParser.py',117),
  ('class_body_element -> BLOCK_COMMENT','class_body_element',1,'p_class_body_element','BasicJavaParser.py',118),
  ('class_body_element -> LINE_COMMENT','class_body_element',1,'p_class_body_element','BasicJavaParser.py',119),
  ('method_declaration -> modifiers VOID NAME ( ) throws_declaration { }','method_declaration',8,'p_method_declaration','BasicJavaParser.py',122),
  ('method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { }','method_declaration',9,'p_method_declaration','BasicJavaParser.py',123),
  ('method_declaration -> modifiers NAME NAME ( ) throws_declaration { }','method_declaration',8,'p_method_declaration','BasicJavaParser.py',124),
  ('method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { }','method_declaration',9,'p_method_declaration','BasicJavaParser.py',125),
  ('method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { }','method_declaration',8,'p_method_declaration','BasicJavaParser.py',126),
  ('method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { }','method_declaration',9,'p_method_declaration','BasicJavaParser.py',127),
  ('throws_declaration -> THROWS NAME','throws_declaration',2,'p_throws_declaration','BasicJavaParser.py',146),
  ('throws_declaration -> <empty>','throws_declaration',0,'p_throws_declaration','BasicJavaParser.py',147),
  ('constructor_declaration -> modifiers NAME ( ) { }','constructor_declaration',6,'p_constructor_declaration','BasicJavaParser.py',152),
  ('constructor_declaration -> modifiers NAME ( arguments_declaration ) { }','constructor_declaration',7,'p_constructor_declaration','BasicJavaParser.py',153),
  ('arguments_declaration -> argument , arguments_declaration','arguments_declaration',3,'p_arguments_declaration','BasicJavaParser.py',167),
  ('arguments_declaration -> argument','arguments_declaration',1,'p_arguments_declaration','BasicJavaParser.py',168),
  ('argument -> primitive_type NAME','argument',2,'p_argument','BasicJavaParser.py',175),
  ('argument -> NAME NAME','argument',2,'p_argument','BasicJavaParser.py',176),
  ('field_declaration -> primitive_type_declaration','field_declaration',1,'p_field_declaration','BasicJavaParser.py',181),
  ('field_declaration -> list_type_declaration','field_declaration',1,'p_field_declaration','BasicJavaParser.py',182),
  ('field_declaration -> having_type_declaration','field_declaration',1,'p_field_declaration','BasicJavaParser.py',183),
  ('field_declaration -> array_type_declaration','field_declaration',1,'p_field_declaration','BasicJavaParser.py',184),
  ('primitive_type_declaration -> modifiers primitive_type NAME ;','primitive_type_declaration',4,'p_primitive_type_declaration','BasicJavaParser.py',187),
  ('list_type_declaration -> modifiers NAME < NAME > NAME ;','list_type_declaration',7,'p_list_type_declaration','BasicJavaParser.py',199),
  ('having_type_declaration -> modifiers NAME NAME ;','having_type_declaration',4,'p_having_type_declaration','BasicJavaParser.py',210),
  ('array_type_declaration -> modifiers primitive_type [ ] NAME ;','array_type_declaration',6,'p_array_type_declaration','BasicJavaParser.py',221),
  ('array_type_declaration -> modifiers primitive_type NAME [ ] ;','array_type_declaration',6,'p_array_type_declaration','BasicJavaParser.py',222),
  ('array_type_declaration -> modifiers NAME [ ] NAME ;','array_type_declaration',6,'p_array_type_declaration','BasicJavaParser.py',223),
  ('array_type_declaration -> modifiers NAME NAME [ ] ;','array_type_declaration',6,'p_array_type_declaration','BasicJavaParser.py',224),
  ('primitive_type -> INT','primitive_type',1,'p_primitive_type','BasicJavaParser.py',248),
  ('primitive_type -> FLOAT','primitive_type',1,'p_primitive_type','BasicJavaParser.py',249),
  ('primitive_type -> SHORT','primitive_type',1,'p_primitive_type','BasicJavaParser.py',250),
  ('primitive_type -> CHAR','primitive_type',1,'p_primitive_type','BasicJavaParser.py',251),
  ('primitive_type -> STRING','primitive_type',1,'p_primitive_type','BasicJavaParser.py',252),
  ('primitive_type -> BYTE','primitive_type',1,'p_primitive_type','BasicJavaParser.py',253),
  ('primitive_type -> LONG','primitive_type',1,'p_primitive_type','BasicJavaParser.py',254),
  ('primitive_type -> DOUBLE','primitive_type',1,'p_primitive_type','BasicJavaParser.py',255),
  ('primitive_type -> BOOLEAN','primitive_type',1,'p_primitive_type','BasicJavaParser.py',256),
  ('modifiers -> modifier','modifiers',1,'p_modifiers','BasicJavaParser.py',259),
  ('modifiers -> modifiers modifier','modifiers',2,'p_modifiers','BasicJavaParser.py',260),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','BasicJavaParser.py',267),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','BasicJavaParser.py',268),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','BasicJavaParser.py',269),
  ('modifier -> STATIC','modifier',1,'p_modifier','BasicJavaParser.py',270),
  ('modifier -> ABSTRACT','modifier',1,'p_modifier','BasicJavaParser.py',271),
  ('modifier -> FINAL','modifier',1,'p_modifier','BasicJavaParser.py',272),
  ('modifier -> <empty>','modifier',0,'p_modifier','BasicJavaParser.py',273),
]
