
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ABSTRACT BLOCK_COMMENT BOOLEAN BYTE CHAR CHAR_LITERAL CLASS DOUBLE EXTENDS FALSE FINAL FLOAT IMPLEMENTS IMPORT IMPORT INT LINE_COMMENT LONG NAME NULL NUM PACKAGE PRIVATE PROTECTED PUBLIC SHORT STATIC STRING STRING_LITERAL SUPER THROWS TRUE VOIDstart : package_declaration imports_declaration class_declarationpackage_declaration : PACKAGE NAME ';'imports_declaration : imports_declaration import_declaration\n                   | import_declarationimport_declaration : IMPORT NAME ';'class_declaration : modifiers CLASS NAME extends_declaration implement_declarations '{' class_body_elements '}'extends_declaration : EXTENDS NAME\n                               | implement_declarations : IMPLEMENTS interfaces\n                                  | interfaces : NAME ',' interfaces\n                      | NAMEclass_body_elements : class_body_elements class_body_element\n                                | class_body_elementclass_body_element : field_declaration\n                              | method_declaration\n                              | constructor_declarationmethod_declaration : modifiers VOID NAME '(' ')' '{' '}'\n                              | modifiers VOID NAME '(' arguments_declaration ')' '{' '}'\n                              | modifiers NAME NAME '(' ')' '{' '}'\n                              | modifiers NAME NAME '(' arguments_declaration ')' '{' '}'\n                              | modifiers primitive_type NAME '(' ')' '{' '}'\n                              | modifiers primitive_type NAME '(' arguments_declaration ')' '{' '}'constructor_declaration : modifiers NAME '(' ')' '{' '}'\n                                   | modifiers NAME '(' arguments_declaration ')' '{' '}'arguments_declaration : argument ',' arguments_declaration\n                      | argumentargument : primitive_type NAME\n                    | NAME NAMEfield_declaration : primitive_type_declaration\n                             | list_type_declaration\n                             | having_type_declaration\n                             | array_type_declarationprimitive_type_declaration : modifiers primitive_type NAME ';'list_type_declaration : modifiers NAME '<' NAME '>' NAME ';'having_type_declaration : modifiers NAME NAME ';'array_type_declaration : modifiers primitive_type '[' ']' NAME ';'\n                                  | modifiers primitive_type NAME '[' ']' ';'\n                                  | modifiers NAME '[' ']' NAME ';'\n                                  | modifiers NAME NAME '[' ']' ';'primitive_type : INT\n                          | FLOAT\n                          | SHORT\n                          | CHAR\n                          | STRING\n                          | BYTE\n                          | LONG\n                          | DOUBLEmodifiers : modifier\n                     | modifiers modifiermodifier : PUBLIC\n                    | PROTECTED\n                    | PRIVATE\n                    | STATIC\n                    | ABSTRACT\n                    | FINAL\n                    | "
    
_lr_action_items = {'PACKAGE':([0,],[3,]),'$end':([1,8,54,],[0,-1,-6,]),'IMPORT':([2,4,5,9,19,22,],[6,6,-4,-3,-2,-5,]),'NAME':([3,6,11,12,13,14,15,16,17,20,21,25,27,29,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,59,60,64,65,66,68,72,74,75,76,78,87,89,99,100,104,107,108,109,111,113,114,115,117,118,119,],[7,18,-49,-51,-52,-53,-54,-55,-56,23,-50,28,31,-57,44,-57,-14,-15,-16,-17,-30,-31,-32,-33,31,57,58,62,-41,-42,-43,-44,-45,-46,-47,-48,-13,68,73,68,68,-36,84,88,90,68,-34,94,68,103,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'PUBLIC':([4,5,9,10,11,12,13,14,15,16,17,21,22,29,32,33,34,35,36,37,38,39,40,41,55,66,76,99,100,104,107,108,109,111,113,114,115,117,118,119,],[12,-4,-3,12,-49,-51,-52,-53,-54,-55,-56,-50,-5,12,12,12,-14,-15,-16,-17,-30,-31,-32,-33,-13,-36,-34,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'PROTECTED':([4,5,9,10,11,12,13,14,15,16,17,21,22,29,32,33,34,35,36,37,38,39,40,41,55,66,76,99,100,104,107,108,109,111,113,114,115,117,118,119,],[13,-4,-3,13,-49,-51,-52,-53,-54,-55,-56,-50,-5,13,13,13,-14,-15,-16,-17,-30,-31,-32,-33,-13,-36,-34,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'PRIVATE':([4,5,9,10,11,12,13,14,15,16,17,21,22,29,32,33,34,35,36,37,38,39,40,41,55,66,76,99,100,104,107,108,109,111,113,114,115,117,118,119,],[14,-4,-3,14,-49,-51,-52,-53,-54,-55,-56,-50,-5,14,14,14,-14,-15,-16,-17,-30,-31,-32,-33,-13,-36,-34,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'STATIC':([4,5,9,10,11,12,13,14,15,16,17,21,22,29,32,33,34,35,36,37,38,39,40,41,55,66,76,99,100,104,107,108,109,111,113,114,115,117,118,119,],[15,-4,-3,15,-49,-51,-52,-53,-54,-55,-56,-50,-5,15,15,15,-14,-15,-16,-17,-30,-31,-32,-33,-13,-36,-34,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'ABSTRACT':([4,5,9,10,11,12,13,14,15,16,17,21,22,29,32,33,34,35,36,37,38,39,40,41,55,66,76,99,100,104,107,108,109,111,113,114,115,117,118,119,],[16,-4,-3,16,-49,-51,-52,-53,-54,-55,-56,-50,-5,16,16,16,-14,-15,-16,-17,-30,-31,-32,-33,-13,-36,-34,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'FINAL':([4,5,9,10,11,12,13,14,15,16,17,21,22,29,32,33,34,35,36,37,38,39,40,41,55,66,76,99,100,104,107,108,109,111,113,114,115,117,118,119,],[17,-4,-3,17,-49,-51,-52,-53,-54,-55,-56,-50,-5,17,17,17,-14,-15,-16,-17,-30,-31,-32,-33,-13,-36,-34,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'CLASS':([4,5,9,10,11,12,13,14,15,16,17,21,22,],[-57,-4,-3,20,-49,-51,-52,-53,-54,-55,-56,-50,-5,]),';':([7,18,58,62,83,90,93,94,103,],[19,22,66,76,99,104,107,108,114,]),'VOID':([11,12,13,14,15,16,17,21,29,32,33,34,35,36,37,38,39,40,41,55,66,76,99,100,104,107,108,109,111,113,114,115,117,118,119,],[-49,-51,-52,-53,-54,-55,-56,-50,-57,43,-57,-14,-15,-16,-17,-30,-31,-32,-33,-13,-36,-34,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'INT':([11,12,13,14,15,16,17,21,29,32,33,34,35,36,37,38,39,40,41,55,59,64,65,66,75,76,87,99,100,104,107,108,109,111,113,114,115,117,118,119,],[-49,-51,-52,-53,-54,-55,-56,-50,-57,46,-57,-14,-15,-16,-17,-30,-31,-32,-33,-13,46,46,46,-36,46,-34,46,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'FLOAT':([11,12,13,14,15,16,17,21,29,32,33,34,35,36,37,38,39,40,41,55,59,64,65,66,75,76,87,99,100,104,107,108,109,111,113,114,115,117,118,119,],[-49,-51,-52,-53,-54,-55,-56,-50,-57,47,-57,-14,-15,-16,-17,-30,-31,-32,-33,-13,47,47,47,-36,47,-34,47,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'SHORT':([11,12,13,14,15,16,17,21,29,32,33,34,35,36,37,38,39,40,41,55,59,64,65,66,75,76,87,99,100,104,107,108,109,111,113,114,115,117,118,119,],[-49,-51,-52,-53,-54,-55,-56,-50,-57,48,-57,-14,-15,-16,-17,-30,-31,-32,-33,-13,48,48,48,-36,48,-34,48,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'CHAR':([11,12,13,14,15,16,17,21,29,32,33,34,35,36,37,38,39,40,41,55,59,64,65,66,75,76,87,99,100,104,107,108,109,111,113,114,115,117,118,119,],[-49,-51,-52,-53,-54,-55,-56,-50,-57,49,-57,-14,-15,-16,-17,-30,-31,-32,-33,-13,49,49,49,-36,49,-34,49,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'STRING':([11,12,13,14,15,16,17,21,29,32,33,34,35,36,37,38,39,40,41,55,59,64,65,66,75,76,87,99,100,104,107,108,109,111,113,114,115,117,118,119,],[-49,-51,-52,-53,-54,-55,-56,-50,-57,50,-57,-14,-15,-16,-17,-30,-31,-32,-33,-13,50,50,50,-36,50,-34,50,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'BYTE':([11,12,13,14,15,16,17,21,29,32,33,34,35,36,37,38,39,40,41,55,59,64,65,66,75,76,87,99,100,104,107,108,109,111,113,114,115,117,118,119,],[-49,-51,-52,-53,-54,-55,-56,-50,-57,51,-57,-14,-15,-16,-17,-30,-31,-32,-33,-13,51,51,51,-36,51,-34,51,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'LONG':([11,12,13,14,15,16,17,21,29,32,33,34,35,36,37,38,39,40,41,55,59,64,65,66,75,76,87,99,100,104,107,108,109,111,113,114,115,117,118,119,],[-49,-51,-52,-53,-54,-55,-56,-50,-57,52,-57,-14,-15,-16,-17,-30,-31,-32,-33,-13,52,52,52,-36,52,-34,52,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'DOUBLE':([11,12,13,14,15,16,17,21,29,32,33,34,35,36,37,38,39,40,41,55,59,64,65,66,75,76,87,99,100,104,107,108,109,111,113,114,115,117,118,119,],[-49,-51,-52,-53,-54,-55,-56,-50,-57,53,-57,-14,-15,-16,-17,-30,-31,-32,-33,-13,53,53,53,-36,53,-34,53,-40,-24,-39,-38,-37,-18,-20,-25,-35,-22,-19,-21,-23,]),'EXTENDS':([23,],[25,]),'IMPLEMENTS':([23,24,28,],[-8,27,-7,]),'{':([23,24,26,28,30,31,56,69,79,81,86,91,96,98,106,],[-8,-10,29,-7,-9,-12,-11,85,95,97,101,105,110,112,116,]),',':([31,71,84,88,],[42,87,-29,-28,]),'}':([33,34,35,36,37,38,39,40,41,55,66,76,85,95,97,99,100,101,104,105,107,108,109,110,111,112,113,114,115,116,117,118,119,],[54,-14,-15,-16,-17,-30,-31,-32,-33,-13,-36,-34,100,109,111,-40,-24,113,-39,115,-38,-37,-18,117,-20,118,-25,-35,-22,119,-19,-21,-23,]),'(':([44,57,58,62,],[59,64,65,75,]),'<':([44,],[60,]),'[':([44,45,46,47,48,49,50,51,52,53,58,62,],[61,63,-41,-42,-43,-44,-45,-46,-47,-48,67,77,]),')':([59,64,65,70,71,75,80,82,84,88,92,102,],[69,79,81,86,-27,91,96,98,-29,-28,106,-26,]),']':([61,63,67,77,],[74,78,83,93,]),'>':([73,],[89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'package_declaration':([0,],[2,]),'imports_declaration':([2,],[4,]),'import_declaration':([2,4,],[5,9,]),'class_declaration':([4,],[8,]),'modifiers':([4,29,33,],[10,32,32,]),'modifier':([4,10,29,32,33,],[11,21,11,21,11,]),'extends_declaration':([23,],[24,]),'implement_declarations':([24,],[26,]),'interfaces':([27,42,],[30,56,]),'class_body_elements':([29,],[33,]),'class_body_element':([29,33,],[34,55,]),'field_declaration':([29,33,],[35,35,]),'method_declaration':([29,33,],[36,36,]),'constructor_declaration':([29,33,],[37,37,]),'primitive_type_declaration':([29,33,],[38,38,]),'list_type_declaration':([29,33,],[39,39,]),'having_type_declaration':([29,33,],[40,40,]),'array_type_declaration':([29,33,],[41,41,]),'primitive_type':([32,59,64,65,75,87,],[45,72,72,72,72,72,]),'arguments_declaration':([59,64,65,75,87,],[70,80,82,92,102,]),'argument':([59,64,65,75,87,],[71,71,71,71,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> package_declaration imports_declaration class_declaration','start',3,'p_start','BasicJavaParser.py',53),
  ('package_declaration -> PACKAGE NAME ;','package_declaration',3,'p_package','BasicJavaParser.py',58),
  ('imports_declaration -> imports_declaration import_declaration','imports_declaration',2,'p_imports','BasicJavaParser.py',62),
  ('imports_declaration -> import_declaration','imports_declaration',1,'p_imports','BasicJavaParser.py',63),
  ('import_declaration -> IMPORT NAME ;','import_declaration',3,'p_import','BasicJavaParser.py',70),
  ('class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements }','class_declaration',8,'p_class_declaration','BasicJavaParser.py',74),
  ('extends_declaration -> EXTENDS NAME','extends_declaration',2,'p_extends_declaration','BasicJavaParser.py',78),
  ('extends_declaration -> <empty>','extends_declaration',0,'p_extends_declaration','BasicJavaParser.py',79),
  ('implement_declarations -> IMPLEMENTS interfaces','implement_declarations',2,'p_implement_declarations','BasicJavaParser.py',84),
  ('implement_declarations -> <empty>','implement_declarations',0,'p_implement_declarations','BasicJavaParser.py',85),
  ('interfaces -> NAME , interfaces','interfaces',3,'p_interfaces','BasicJavaParser.py',90),
  ('interfaces -> NAME','interfaces',1,'p_interfaces','BasicJavaParser.py',91),
  ('class_body_elements -> class_body_elements class_body_element','class_body_elements',2,'p_class_body_elements','BasicJavaParser.py',98),
  ('class_body_elements -> class_body_element','class_body_elements',1,'p_class_body_elements','BasicJavaParser.py',99),
  ('class_body_element -> field_declaration','class_body_element',1,'p_class_body_element','BasicJavaParser.py',102),
  ('class_body_element -> method_declaration','class_body_element',1,'p_class_body_element','BasicJavaParser.py',103),
  ('class_body_element -> constructor_declaration','class_body_element',1,'p_class_body_element','BasicJavaParser.py',104),
  ('method_declaration -> modifiers VOID NAME ( ) { }','method_declaration',7,'p_method_declaration','BasicJavaParser.py',107),
  ('method_declaration -> modifiers VOID NAME ( arguments_declaration ) { }','method_declaration',8,'p_method_declaration','BasicJavaParser.py',108),
  ('method_declaration -> modifiers NAME NAME ( ) { }','method_declaration',7,'p_method_declaration','BasicJavaParser.py',109),
  ('method_declaration -> modifiers NAME NAME ( arguments_declaration ) { }','method_declaration',8,'p_method_declaration','BasicJavaParser.py',110),
  ('method_declaration -> modifiers primitive_type NAME ( ) { }','method_declaration',7,'p_method_declaration','BasicJavaParser.py',111),
  ('method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { }','method_declaration',8,'p_method_declaration','BasicJavaParser.py',112),
  ('constructor_declaration -> modifiers NAME ( ) { }','constructor_declaration',6,'p_constructor_declaration','BasicJavaParser.py',119),
  ('constructor_declaration -> modifiers NAME ( arguments_declaration ) { }','constructor_declaration',7,'p_constructor_declaration','BasicJavaParser.py',120),
  ('arguments_declaration -> argument , arguments_declaration','arguments_declaration',3,'p_arguments_declaration','BasicJavaParser.py',127),
  ('arguments_declaration -> argument','arguments_declaration',1,'p_arguments_declaration','BasicJavaParser.py',128),
  ('argument -> primitive_type NAME','argument',2,'p_argument','BasicJavaParser.py',135),
  ('argument -> NAME NAME','argument',2,'p_argument','BasicJavaParser.py',136),
  ('field_declaration -> primitive_type_declaration','field_declaration',1,'p_field_declaration','BasicJavaParser.py',141),
  ('field_declaration -> list_type_declaration','field_declaration',1,'p_field_declaration','BasicJavaParser.py',142),
  ('field_declaration -> having_type_declaration','field_declaration',1,'p_field_declaration','BasicJavaParser.py',143),
  ('field_declaration -> array_type_declaration','field_declaration',1,'p_field_declaration','BasicJavaParser.py',144),
  ('primitive_type_declaration -> modifiers primitive_type NAME ;','primitive_type_declaration',4,'p_primitive_type_declaration','BasicJavaParser.py',147),
  ('list_type_declaration -> modifiers NAME < NAME > NAME ;','list_type_declaration',7,'p_list_type_declaration','BasicJavaParser.py',152),
  ('having_type_declaration -> modifiers NAME NAME ;','having_type_declaration',4,'p_having_type_declaration','BasicJavaParser.py',156),
  ('array_type_declaration -> modifiers primitive_type [ ] NAME ;','array_type_declaration',6,'p_array_type_declaration','BasicJavaParser.py',160),
  ('array_type_declaration -> modifiers primitive_type NAME [ ] ;','array_type_declaration',6,'p_array_type_declaration','BasicJavaParser.py',161),
  ('array_type_declaration -> modifiers NAME [ ] NAME ;','array_type_declaration',6,'p_array_type_declaration','BasicJavaParser.py',162),
  ('array_type_declaration -> modifiers NAME NAME [ ] ;','array_type_declaration',6,'p_array_type_declaration','BasicJavaParser.py',163),
  ('primitive_type -> INT','primitive_type',1,'p_primitive_type','BasicJavaParser.py',171),
  ('primitive_type -> FLOAT','primitive_type',1,'p_primitive_type','BasicJavaParser.py',172),
  ('primitive_type -> SHORT','primitive_type',1,'p_primitive_type','BasicJavaParser.py',173),
  ('primitive_type -> CHAR','primitive_type',1,'p_primitive_type','BasicJavaParser.py',174),
  ('primitive_type -> STRING','primitive_type',1,'p_primitive_type','BasicJavaParser.py',175),
  ('primitive_type -> BYTE','primitive_type',1,'p_primitive_type','BasicJavaParser.py',176),
  ('primitive_type -> LONG','primitive_type',1,'p_primitive_type','BasicJavaParser.py',177),
  ('primitive_type -> DOUBLE','primitive_type',1,'p_primitive_type','BasicJavaParser.py',178),
  ('modifiers -> modifier','modifiers',1,'p_modifiers','BasicJavaParser.py',181),
  ('modifiers -> modifiers modifier','modifiers',2,'p_modifiers','BasicJavaParser.py',182),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','BasicJavaParser.py',189),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','BasicJavaParser.py',190),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','BasicJavaParser.py',191),
  ('modifier -> STATIC','modifier',1,'p_modifier','BasicJavaParser.py',192),
  ('modifier -> ABSTRACT','modifier',1,'p_modifier','BasicJavaParser.py',193),
  ('modifier -> FINAL','modifier',1,'p_modifier','BasicJavaParser.py',194),
  ('modifier -> <empty>','modifier',0,'p_modifier','BasicJavaParser.py',195),
]
