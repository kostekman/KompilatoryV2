Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHAR_LITERAL
    NUM
    STRING_LITERAL

Grammar

Rule 0     S' -> start
Rule 1     start -> package_declaration imports_declaration class_declaration
Rule 2     package_declaration -> PACKAGE NAME ;
Rule 3     imports_declaration -> imports_declaration import_declaration
Rule 4     imports_declaration -> import_declaration
Rule 5     import_declaration -> IMPORT STATIC NAME ;
Rule 6     import_declaration -> IMPORT STATIC NAME * ;
Rule 7     import_declaration -> IMPORT NAME ;
Rule 8     import_declaration -> IMPORT NAME * ;
Rule 9     class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements }
Rule 10    extends_declaration -> EXTENDS NAME
Rule 11    extends_declaration -> <empty>
Rule 12    implement_declarations -> IMPLEMENTS interfaces
Rule 13    implement_declarations -> <empty>
Rule 14    interfaces -> NAME , interfaces
Rule 15    interfaces -> NAME
Rule 16    class_body_elements -> class_body_elements class_body_element
Rule 17    class_body_elements -> class_body_element
Rule 18    class_body_element -> field_declaration
Rule 19    class_body_element -> method_declaration
Rule 20    class_body_element -> constructor_declaration
Rule 21    class_body_element -> BLOCK_COMMENT
Rule 22    class_body_element -> LINE_COMMENT
Rule 23    method_declaration -> modifiers VOID NAME ( ) throws_declaration { }
Rule 24    method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { }
Rule 25    method_declaration -> modifiers NAME NAME ( ) throws_declaration { }
Rule 26    method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { }
Rule 27    method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { }
Rule 28    method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { }
Rule 29    throws_declaration -> THROWS NAME
Rule 30    throws_declaration -> <empty>
Rule 31    constructor_declaration -> modifiers NAME ( ) { }
Rule 32    constructor_declaration -> modifiers NAME ( arguments_declaration ) { }
Rule 33    arguments_declaration -> argument , arguments_declaration
Rule 34    arguments_declaration -> argument
Rule 35    argument -> primitive_type NAME
Rule 36    argument -> NAME NAME
Rule 37    field_declaration -> primitive_type_declaration
Rule 38    field_declaration -> list_type_declaration
Rule 39    field_declaration -> having_type_declaration
Rule 40    field_declaration -> array_type_declaration
Rule 41    primitive_type_declaration -> modifiers primitive_type NAME ;
Rule 42    list_type_declaration -> modifiers NAME < NAME > NAME ;
Rule 43    having_type_declaration -> modifiers NAME NAME ;
Rule 44    array_type_declaration -> modifiers primitive_type [ ] NAME ;
Rule 45    array_type_declaration -> modifiers primitive_type NAME [ ] ;
Rule 46    array_type_declaration -> modifiers NAME [ ] NAME ;
Rule 47    array_type_declaration -> modifiers NAME NAME [ ] ;
Rule 48    primitive_type -> INT
Rule 49    primitive_type -> FLOAT
Rule 50    primitive_type -> SHORT
Rule 51    primitive_type -> CHAR
Rule 52    primitive_type -> STRING
Rule 53    primitive_type -> BYTE
Rule 54    primitive_type -> LONG
Rule 55    primitive_type -> DOUBLE
Rule 56    primitive_type -> BOOLEAN
Rule 57    modifiers -> modifier
Rule 58    modifiers -> modifiers modifier
Rule 59    modifier -> PUBLIC
Rule 60    modifier -> PROTECTED
Rule 61    modifier -> PRIVATE
Rule 62    modifier -> STATIC
Rule 63    modifier -> ABSTRACT
Rule 64    modifier -> FINAL
Rule 65    modifier -> <empty>

Terminals, with rules where they appear

(                    : 23 24 25 26 27 28 31 32
)                    : 23 24 25 26 27 28 31 32
*                    : 6 8
,                    : 14 33
;                    : 2 5 6 7 8 41 42 43 44 45 46 47
<                    : 42
>                    : 42
ABSTRACT             : 63
BLOCK_COMMENT        : 21
BOOLEAN              : 56
BYTE                 : 53
CHAR                 : 51
CHAR_LITERAL         : 
CLASS                : 9
DOUBLE               : 55
EXTENDS              : 10
FINAL                : 64
FLOAT                : 49
IMPLEMENTS           : 12
IMPORT               : 5 6 7 8
INT                  : 48
LINE_COMMENT         : 22
LONG                 : 54
NAME                 : 2 5 6 7 8 9 10 14 15 23 24 25 25 26 26 27 28 29 31 32 35 36 36 41 42 42 42 43 43 44 45 46 46 47 47
NUM                  : 
PACKAGE              : 2
PRIVATE              : 61
PROTECTED            : 60
PUBLIC               : 59
SHORT                : 50
STATIC               : 5 6 62
STRING               : 52
STRING_LITERAL       : 
THROWS               : 29
VOID                 : 23 24
[                    : 44 45 46 47
]                    : 44 45 46 47
error                : 
{                    : 9 23 24 25 26 27 28 31 32
}                    : 9 23 24 25 26 27 28 31 32

Nonterminals, with rules where they appear

argument             : 33 34
arguments_declaration : 24 26 28 32 33
array_type_declaration : 40
class_body_element   : 16 17
class_body_elements  : 9 16
class_declaration    : 1
constructor_declaration : 20
extends_declaration  : 9
field_declaration    : 18
having_type_declaration : 39
implement_declarations : 9
import_declaration   : 3 4
imports_declaration  : 1 3
interfaces           : 12 14
list_type_declaration : 38
method_declaration   : 19
modifier             : 57 58
modifiers            : 9 23 24 25 26 27 28 31 32 41 42 43 44 45 46 47 58
package_declaration  : 1
primitive_type       : 27 28 35 41 44 45
primitive_type_declaration : 37
start                : 0
throws_declaration   : 23 24 25 26 27 28

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . package_declaration imports_declaration class_declaration
    (2) package_declaration -> . PACKAGE NAME ;

    PACKAGE         shift and go to state 3

    start                          shift and go to state 1
    package_declaration            shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> package_declaration . imports_declaration class_declaration
    (3) imports_declaration -> . imports_declaration import_declaration
    (4) imports_declaration -> . import_declaration
    (5) import_declaration -> . IMPORT STATIC NAME ;
    (6) import_declaration -> . IMPORT STATIC NAME * ;
    (7) import_declaration -> . IMPORT NAME ;
    (8) import_declaration -> . IMPORT NAME * ;

    IMPORT          shift and go to state 6

    imports_declaration            shift and go to state 4
    import_declaration             shift and go to state 5

state 3

    (2) package_declaration -> PACKAGE . NAME ;

    NAME            shift and go to state 7


state 4

    (1) start -> package_declaration imports_declaration . class_declaration
    (3) imports_declaration -> imports_declaration . import_declaration
    (9) class_declaration -> . modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements }
    (5) import_declaration -> . IMPORT STATIC NAME ;
    (6) import_declaration -> . IMPORT STATIC NAME * ;
    (7) import_declaration -> . IMPORT NAME ;
    (8) import_declaration -> . IMPORT NAME * ;
    (57) modifiers -> . modifier
    (58) modifiers -> . modifiers modifier
    (59) modifier -> . PUBLIC
    (60) modifier -> . PROTECTED
    (61) modifier -> . PRIVATE
    (62) modifier -> . STATIC
    (63) modifier -> . ABSTRACT
    (64) modifier -> . FINAL
    (65) modifier -> .

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
    IMPORT          shift and go to state 6
    PUBLIC          shift and go to state 13
    PROTECTED       shift and go to state 14
    PRIVATE         shift and go to state 15
    STATIC          shift and go to state 11
    ABSTRACT        shift and go to state 16
    FINAL           shift and go to state 17
    CLASS           reduce using rule 65 (modifier -> .)

  ! PUBLIC          [ reduce using rule 65 (modifier -> .) ]
  ! PROTECTED       [ reduce using rule 65 (modifier -> .) ]
  ! PRIVATE         [ reduce using rule 65 (modifier -> .) ]
  ! STATIC          [ reduce using rule 65 (modifier -> .) ]
  ! ABSTRACT        [ reduce using rule 65 (modifier -> .) ]
  ! FINAL           [ reduce using rule 65 (modifier -> .) ]

    class_declaration              shift and go to state 8
    import_declaration             shift and go to state 9
    modifiers                      shift and go to state 10
    modifier                       shift and go to state 12

state 5

    (4) imports_declaration -> import_declaration .

    IMPORT          reduce using rule 4 (imports_declaration -> import_declaration .)
    PUBLIC          reduce using rule 4 (imports_declaration -> import_declaration .)
    PROTECTED       reduce using rule 4 (imports_declaration -> import_declaration .)
    PRIVATE         reduce using rule 4 (imports_declaration -> import_declaration .)
    STATIC          reduce using rule 4 (imports_declaration -> import_declaration .)
    ABSTRACT        reduce using rule 4 (imports_declaration -> import_declaration .)
    FINAL           reduce using rule 4 (imports_declaration -> import_declaration .)
    CLASS           reduce using rule 4 (imports_declaration -> import_declaration .)


state 6

    (5) import_declaration -> IMPORT . STATIC NAME ;
    (6) import_declaration -> IMPORT . STATIC NAME * ;
    (7) import_declaration -> IMPORT . NAME ;
    (8) import_declaration -> IMPORT . NAME * ;

    STATIC          shift and go to state 18
    NAME            shift and go to state 19


state 7

    (2) package_declaration -> PACKAGE NAME . ;

    ;               shift and go to state 20


state 8

    (1) start -> package_declaration imports_declaration class_declaration .

    $end            reduce using rule 1 (start -> package_declaration imports_declaration class_declaration .)


state 9

    (3) imports_declaration -> imports_declaration import_declaration .

    IMPORT          reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    PUBLIC          reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    PROTECTED       reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    PRIVATE         reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    STATIC          reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    ABSTRACT        reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    FINAL           reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    CLASS           reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)


state 10

    (9) class_declaration -> modifiers . CLASS NAME extends_declaration implement_declarations { class_body_elements }
    (58) modifiers -> modifiers . modifier
    (59) modifier -> . PUBLIC
    (60) modifier -> . PROTECTED
    (61) modifier -> . PRIVATE
    (62) modifier -> . STATIC
    (63) modifier -> . ABSTRACT
    (64) modifier -> . FINAL
    (65) modifier -> .

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
    CLASS           shift and go to state 21
    PUBLIC          shift and go to state 13
    PROTECTED       shift and go to state 14
    PRIVATE         shift and go to state 15
    STATIC          shift and go to state 11
    ABSTRACT        shift and go to state 16
    FINAL           shift and go to state 17

  ! CLASS           [ reduce using rule 65 (modifier -> .) ]
  ! PUBLIC          [ reduce using rule 65 (modifier -> .) ]
  ! PROTECTED       [ reduce using rule 65 (modifier -> .) ]
  ! PRIVATE         [ reduce using rule 65 (modifier -> .) ]
  ! STATIC          [ reduce using rule 65 (modifier -> .) ]
  ! ABSTRACT        [ reduce using rule 65 (modifier -> .) ]
  ! FINAL           [ reduce using rule 65 (modifier -> .) ]

    modifier                       shift and go to state 22

state 11

    (62) modifier -> STATIC .

    CLASS           reduce using rule 62 (modifier -> STATIC .)
    PUBLIC          reduce using rule 62 (modifier -> STATIC .)
    PROTECTED       reduce using rule 62 (modifier -> STATIC .)
    PRIVATE         reduce using rule 62 (modifier -> STATIC .)
    STATIC          reduce using rule 62 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 62 (modifier -> STATIC .)
    FINAL           reduce using rule 62 (modifier -> STATIC .)
    VOID            reduce using rule 62 (modifier -> STATIC .)
    NAME            reduce using rule 62 (modifier -> STATIC .)
    INT             reduce using rule 62 (modifier -> STATIC .)
    FLOAT           reduce using rule 62 (modifier -> STATIC .)
    SHORT           reduce using rule 62 (modifier -> STATIC .)
    CHAR            reduce using rule 62 (modifier -> STATIC .)
    STRING          reduce using rule 62 (modifier -> STATIC .)
    BYTE            reduce using rule 62 (modifier -> STATIC .)
    LONG            reduce using rule 62 (modifier -> STATIC .)
    DOUBLE          reduce using rule 62 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 62 (modifier -> STATIC .)


state 12

    (57) modifiers -> modifier .

    CLASS           reduce using rule 57 (modifiers -> modifier .)
    PUBLIC          reduce using rule 57 (modifiers -> modifier .)
    PROTECTED       reduce using rule 57 (modifiers -> modifier .)
    PRIVATE         reduce using rule 57 (modifiers -> modifier .)
    STATIC          reduce using rule 57 (modifiers -> modifier .)
    ABSTRACT        reduce using rule 57 (modifiers -> modifier .)
    FINAL           reduce using rule 57 (modifiers -> modifier .)
    VOID            reduce using rule 57 (modifiers -> modifier .)
    NAME            reduce using rule 57 (modifiers -> modifier .)
    INT             reduce using rule 57 (modifiers -> modifier .)
    FLOAT           reduce using rule 57 (modifiers -> modifier .)
    SHORT           reduce using rule 57 (modifiers -> modifier .)
    CHAR            reduce using rule 57 (modifiers -> modifier .)
    STRING          reduce using rule 57 (modifiers -> modifier .)
    BYTE            reduce using rule 57 (modifiers -> modifier .)
    LONG            reduce using rule 57 (modifiers -> modifier .)
    DOUBLE          reduce using rule 57 (modifiers -> modifier .)
    BOOLEAN         reduce using rule 57 (modifiers -> modifier .)


state 13

    (59) modifier -> PUBLIC .

    CLASS           reduce using rule 59 (modifier -> PUBLIC .)
    PUBLIC          reduce using rule 59 (modifier -> PUBLIC .)
    PROTECTED       reduce using rule 59 (modifier -> PUBLIC .)
    PRIVATE         reduce using rule 59 (modifier -> PUBLIC .)
    STATIC          reduce using rule 59 (modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 59 (modifier -> PUBLIC .)
    FINAL           reduce using rule 59 (modifier -> PUBLIC .)
    VOID            reduce using rule 59 (modifier -> PUBLIC .)
    NAME            reduce using rule 59 (modifier -> PUBLIC .)
    INT             reduce using rule 59 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 59 (modifier -> PUBLIC .)
    SHORT           reduce using rule 59 (modifier -> PUBLIC .)
    CHAR            reduce using rule 59 (modifier -> PUBLIC .)
    STRING          reduce using rule 59 (modifier -> PUBLIC .)
    BYTE            reduce using rule 59 (modifier -> PUBLIC .)
    LONG            reduce using rule 59 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 59 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 59 (modifier -> PUBLIC .)


state 14

    (60) modifier -> PROTECTED .

    CLASS           reduce using rule 60 (modifier -> PROTECTED .)
    PUBLIC          reduce using rule 60 (modifier -> PROTECTED .)
    PROTECTED       reduce using rule 60 (modifier -> PROTECTED .)
    PRIVATE         reduce using rule 60 (modifier -> PROTECTED .)
    STATIC          reduce using rule 60 (modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 60 (modifier -> PROTECTED .)
    FINAL           reduce using rule 60 (modifier -> PROTECTED .)
    VOID            reduce using rule 60 (modifier -> PROTECTED .)
    NAME            reduce using rule 60 (modifier -> PROTECTED .)
    INT             reduce using rule 60 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 60 (modifier -> PROTECTED .)
    SHORT           reduce using rule 60 (modifier -> PROTECTED .)
    CHAR            reduce using rule 60 (modifier -> PROTECTED .)
    STRING          reduce using rule 60 (modifier -> PROTECTED .)
    BYTE            reduce using rule 60 (modifier -> PROTECTED .)
    LONG            reduce using rule 60 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 60 (modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 60 (modifier -> PROTECTED .)


state 15

    (61) modifier -> PRIVATE .

    CLASS           reduce using rule 61 (modifier -> PRIVATE .)
    PUBLIC          reduce using rule 61 (modifier -> PRIVATE .)
    PROTECTED       reduce using rule 61 (modifier -> PRIVATE .)
    PRIVATE         reduce using rule 61 (modifier -> PRIVATE .)
    STATIC          reduce using rule 61 (modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 61 (modifier -> PRIVATE .)
    FINAL           reduce using rule 61 (modifier -> PRIVATE .)
    VOID            reduce using rule 61 (modifier -> PRIVATE .)
    NAME            reduce using rule 61 (modifier -> PRIVATE .)
    INT             reduce using rule 61 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 61 (modifier -> PRIVATE .)
    SHORT           reduce using rule 61 (modifier -> PRIVATE .)
    CHAR            reduce using rule 61 (modifier -> PRIVATE .)
    STRING          reduce using rule 61 (modifier -> PRIVATE .)
    BYTE            reduce using rule 61 (modifier -> PRIVATE .)
    LONG            reduce using rule 61 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 61 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 61 (modifier -> PRIVATE .)


state 16

    (63) modifier -> ABSTRACT .

    CLASS           reduce using rule 63 (modifier -> ABSTRACT .)
    PUBLIC          reduce using rule 63 (modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 63 (modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 63 (modifier -> ABSTRACT .)
    STATIC          reduce using rule 63 (modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 63 (modifier -> ABSTRACT .)
    FINAL           reduce using rule 63 (modifier -> ABSTRACT .)
    VOID            reduce using rule 63 (modifier -> ABSTRACT .)
    NAME            reduce using rule 63 (modifier -> ABSTRACT .)
    INT             reduce using rule 63 (modifier -> ABSTRACT .)
    FLOAT           reduce using rule 63 (modifier -> ABSTRACT .)
    SHORT           reduce using rule 63 (modifier -> ABSTRACT .)
    CHAR            reduce using rule 63 (modifier -> ABSTRACT .)
    STRING          reduce using rule 63 (modifier -> ABSTRACT .)
    BYTE            reduce using rule 63 (modifier -> ABSTRACT .)
    LONG            reduce using rule 63 (modifier -> ABSTRACT .)
    DOUBLE          reduce using rule 63 (modifier -> ABSTRACT .)
    BOOLEAN         reduce using rule 63 (modifier -> ABSTRACT .)


state 17

    (64) modifier -> FINAL .

    CLASS           reduce using rule 64 (modifier -> FINAL .)
    PUBLIC          reduce using rule 64 (modifier -> FINAL .)
    PROTECTED       reduce using rule 64 (modifier -> FINAL .)
    PRIVATE         reduce using rule 64 (modifier -> FINAL .)
    STATIC          reduce using rule 64 (modifier -> FINAL .)
    ABSTRACT        reduce using rule 64 (modifier -> FINAL .)
    FINAL           reduce using rule 64 (modifier -> FINAL .)
    VOID            reduce using rule 64 (modifier -> FINAL .)
    NAME            reduce using rule 64 (modifier -> FINAL .)
    INT             reduce using rule 64 (modifier -> FINAL .)
    FLOAT           reduce using rule 64 (modifier -> FINAL .)
    SHORT           reduce using rule 64 (modifier -> FINAL .)
    CHAR            reduce using rule 64 (modifier -> FINAL .)
    STRING          reduce using rule 64 (modifier -> FINAL .)
    BYTE            reduce using rule 64 (modifier -> FINAL .)
    LONG            reduce using rule 64 (modifier -> FINAL .)
    DOUBLE          reduce using rule 64 (modifier -> FINAL .)
    BOOLEAN         reduce using rule 64 (modifier -> FINAL .)


state 18

    (5) import_declaration -> IMPORT STATIC . NAME ;
    (6) import_declaration -> IMPORT STATIC . NAME * ;

    NAME            shift and go to state 23


state 19

    (7) import_declaration -> IMPORT NAME . ;
    (8) import_declaration -> IMPORT NAME . * ;

    ;               shift and go to state 24
    *               shift and go to state 25


state 20

    (2) package_declaration -> PACKAGE NAME ; .

    IMPORT          reduce using rule 2 (package_declaration -> PACKAGE NAME ; .)


state 21

    (9) class_declaration -> modifiers CLASS . NAME extends_declaration implement_declarations { class_body_elements }

    NAME            shift and go to state 26


state 22

    (58) modifiers -> modifiers modifier .

    CLASS           reduce using rule 58 (modifiers -> modifiers modifier .)
    PUBLIC          reduce using rule 58 (modifiers -> modifiers modifier .)
    PROTECTED       reduce using rule 58 (modifiers -> modifiers modifier .)
    PRIVATE         reduce using rule 58 (modifiers -> modifiers modifier .)
    STATIC          reduce using rule 58 (modifiers -> modifiers modifier .)
    ABSTRACT        reduce using rule 58 (modifiers -> modifiers modifier .)
    FINAL           reduce using rule 58 (modifiers -> modifiers modifier .)
    VOID            reduce using rule 58 (modifiers -> modifiers modifier .)
    NAME            reduce using rule 58 (modifiers -> modifiers modifier .)
    INT             reduce using rule 58 (modifiers -> modifiers modifier .)
    FLOAT           reduce using rule 58 (modifiers -> modifiers modifier .)
    SHORT           reduce using rule 58 (modifiers -> modifiers modifier .)
    CHAR            reduce using rule 58 (modifiers -> modifiers modifier .)
    STRING          reduce using rule 58 (modifiers -> modifiers modifier .)
    BYTE            reduce using rule 58 (modifiers -> modifiers modifier .)
    LONG            reduce using rule 58 (modifiers -> modifiers modifier .)
    DOUBLE          reduce using rule 58 (modifiers -> modifiers modifier .)
    BOOLEAN         reduce using rule 58 (modifiers -> modifiers modifier .)


state 23

    (5) import_declaration -> IMPORT STATIC NAME . ;
    (6) import_declaration -> IMPORT STATIC NAME . * ;

    ;               shift and go to state 27
    *               shift and go to state 28


state 24

    (7) import_declaration -> IMPORT NAME ; .

    IMPORT          reduce using rule 7 (import_declaration -> IMPORT NAME ; .)
    PUBLIC          reduce using rule 7 (import_declaration -> IMPORT NAME ; .)
    PROTECTED       reduce using rule 7 (import_declaration -> IMPORT NAME ; .)
    PRIVATE         reduce using rule 7 (import_declaration -> IMPORT NAME ; .)
    STATIC          reduce using rule 7 (import_declaration -> IMPORT NAME ; .)
    ABSTRACT        reduce using rule 7 (import_declaration -> IMPORT NAME ; .)
    FINAL           reduce using rule 7 (import_declaration -> IMPORT NAME ; .)
    CLASS           reduce using rule 7 (import_declaration -> IMPORT NAME ; .)


state 25

    (8) import_declaration -> IMPORT NAME * . ;

    ;               shift and go to state 29


state 26

    (9) class_declaration -> modifiers CLASS NAME . extends_declaration implement_declarations { class_body_elements }
    (10) extends_declaration -> . EXTENDS NAME
    (11) extends_declaration -> .

    EXTENDS         shift and go to state 31
    IMPLEMENTS      reduce using rule 11 (extends_declaration -> .)
    {               reduce using rule 11 (extends_declaration -> .)

    extends_declaration            shift and go to state 30

state 27

    (5) import_declaration -> IMPORT STATIC NAME ; .

    IMPORT          reduce using rule 5 (import_declaration -> IMPORT STATIC NAME ; .)
    PUBLIC          reduce using rule 5 (import_declaration -> IMPORT STATIC NAME ; .)
    PROTECTED       reduce using rule 5 (import_declaration -> IMPORT STATIC NAME ; .)
    PRIVATE         reduce using rule 5 (import_declaration -> IMPORT STATIC NAME ; .)
    STATIC          reduce using rule 5 (import_declaration -> IMPORT STATIC NAME ; .)
    ABSTRACT        reduce using rule 5 (import_declaration -> IMPORT STATIC NAME ; .)
    FINAL           reduce using rule 5 (import_declaration -> IMPORT STATIC NAME ; .)
    CLASS           reduce using rule 5 (import_declaration -> IMPORT STATIC NAME ; .)


state 28

    (6) import_declaration -> IMPORT STATIC NAME * . ;

    ;               shift and go to state 32


state 29

    (8) import_declaration -> IMPORT NAME * ; .

    IMPORT          reduce using rule 8 (import_declaration -> IMPORT NAME * ; .)
    PUBLIC          reduce using rule 8 (import_declaration -> IMPORT NAME * ; .)
    PROTECTED       reduce using rule 8 (import_declaration -> IMPORT NAME * ; .)
    PRIVATE         reduce using rule 8 (import_declaration -> IMPORT NAME * ; .)
    STATIC          reduce using rule 8 (import_declaration -> IMPORT NAME * ; .)
    ABSTRACT        reduce using rule 8 (import_declaration -> IMPORT NAME * ; .)
    FINAL           reduce using rule 8 (import_declaration -> IMPORT NAME * ; .)
    CLASS           reduce using rule 8 (import_declaration -> IMPORT NAME * ; .)


state 30

    (9) class_declaration -> modifiers CLASS NAME extends_declaration . implement_declarations { class_body_elements }
    (12) implement_declarations -> . IMPLEMENTS interfaces
    (13) implement_declarations -> .

    IMPLEMENTS      shift and go to state 34
    {               reduce using rule 13 (implement_declarations -> .)

    implement_declarations         shift and go to state 33

state 31

    (10) extends_declaration -> EXTENDS . NAME

    NAME            shift and go to state 35


state 32

    (6) import_declaration -> IMPORT STATIC NAME * ; .

    IMPORT          reduce using rule 6 (import_declaration -> IMPORT STATIC NAME * ; .)
    PUBLIC          reduce using rule 6 (import_declaration -> IMPORT STATIC NAME * ; .)
    PROTECTED       reduce using rule 6 (import_declaration -> IMPORT STATIC NAME * ; .)
    PRIVATE         reduce using rule 6 (import_declaration -> IMPORT STATIC NAME * ; .)
    STATIC          reduce using rule 6 (import_declaration -> IMPORT STATIC NAME * ; .)
    ABSTRACT        reduce using rule 6 (import_declaration -> IMPORT STATIC NAME * ; .)
    FINAL           reduce using rule 6 (import_declaration -> IMPORT STATIC NAME * ; .)
    CLASS           reduce using rule 6 (import_declaration -> IMPORT STATIC NAME * ; .)


state 33

    (9) class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations . { class_body_elements }

    {               shift and go to state 36


state 34

    (12) implement_declarations -> IMPLEMENTS . interfaces
    (14) interfaces -> . NAME , interfaces
    (15) interfaces -> . NAME

    NAME            shift and go to state 38

    interfaces                     shift and go to state 37

state 35

    (10) extends_declaration -> EXTENDS NAME .

    IMPLEMENTS      reduce using rule 10 (extends_declaration -> EXTENDS NAME .)
    {               reduce using rule 10 (extends_declaration -> EXTENDS NAME .)


state 36

    (9) class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { . class_body_elements }
    (16) class_body_elements -> . class_body_elements class_body_element
    (17) class_body_elements -> . class_body_element
    (18) class_body_element -> . field_declaration
    (19) class_body_element -> . method_declaration
    (20) class_body_element -> . constructor_declaration
    (21) class_body_element -> . BLOCK_COMMENT
    (22) class_body_element -> . LINE_COMMENT
    (37) field_declaration -> . primitive_type_declaration
    (38) field_declaration -> . list_type_declaration
    (39) field_declaration -> . having_type_declaration
    (40) field_declaration -> . array_type_declaration
    (23) method_declaration -> . modifiers VOID NAME ( ) throws_declaration { }
    (24) method_declaration -> . modifiers VOID NAME ( arguments_declaration ) throws_declaration { }
    (25) method_declaration -> . modifiers NAME NAME ( ) throws_declaration { }
    (26) method_declaration -> . modifiers NAME NAME ( arguments_declaration ) throws_declaration { }
    (27) method_declaration -> . modifiers primitive_type NAME ( ) throws_declaration { }
    (28) method_declaration -> . modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { }
    (31) constructor_declaration -> . modifiers NAME ( ) { }
    (32) constructor_declaration -> . modifiers NAME ( arguments_declaration ) { }
    (41) primitive_type_declaration -> . modifiers primitive_type NAME ;
    (42) list_type_declaration -> . modifiers NAME < NAME > NAME ;
    (43) having_type_declaration -> . modifiers NAME NAME ;
    (44) array_type_declaration -> . modifiers primitive_type [ ] NAME ;
    (45) array_type_declaration -> . modifiers primitive_type NAME [ ] ;
    (46) array_type_declaration -> . modifiers NAME [ ] NAME ;
    (47) array_type_declaration -> . modifiers NAME NAME [ ] ;
    (57) modifiers -> . modifier
    (58) modifiers -> . modifiers modifier
    (59) modifier -> . PUBLIC
    (60) modifier -> . PROTECTED
    (61) modifier -> . PRIVATE
    (62) modifier -> . STATIC
    (63) modifier -> . ABSTRACT
    (64) modifier -> . FINAL
    (65) modifier -> .

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
    BLOCK_COMMENT   shift and go to state 45
    LINE_COMMENT    shift and go to state 46
    PUBLIC          shift and go to state 13
    PROTECTED       shift and go to state 14
    PRIVATE         shift and go to state 15
    STATIC          shift and go to state 11
    ABSTRACT        shift and go to state 16
    FINAL           shift and go to state 17
    VOID            reduce using rule 65 (modifier -> .)
    NAME            reduce using rule 65 (modifier -> .)
    INT             reduce using rule 65 (modifier -> .)
    FLOAT           reduce using rule 65 (modifier -> .)
    SHORT           reduce using rule 65 (modifier -> .)
    CHAR            reduce using rule 65 (modifier -> .)
    STRING          reduce using rule 65 (modifier -> .)
    BYTE            reduce using rule 65 (modifier -> .)
    LONG            reduce using rule 65 (modifier -> .)
    DOUBLE          reduce using rule 65 (modifier -> .)
    BOOLEAN         reduce using rule 65 (modifier -> .)

  ! PUBLIC          [ reduce using rule 65 (modifier -> .) ]
  ! PROTECTED       [ reduce using rule 65 (modifier -> .) ]
  ! PRIVATE         [ reduce using rule 65 (modifier -> .) ]
  ! STATIC          [ reduce using rule 65 (modifier -> .) ]
  ! ABSTRACT        [ reduce using rule 65 (modifier -> .) ]
  ! FINAL           [ reduce using rule 65 (modifier -> .) ]

    modifiers                      shift and go to state 39
    class_body_elements            shift and go to state 40
    class_body_element             shift and go to state 41
    field_declaration              shift and go to state 42
    method_declaration             shift and go to state 43
    constructor_declaration        shift and go to state 44
    primitive_type_declaration     shift and go to state 47
    list_type_declaration          shift and go to state 48
    having_type_declaration        shift and go to state 49
    array_type_declaration         shift and go to state 50
    modifier                       shift and go to state 12

state 37

    (12) implement_declarations -> IMPLEMENTS interfaces .

    {               reduce using rule 12 (implement_declarations -> IMPLEMENTS interfaces .)


state 38

    (14) interfaces -> NAME . , interfaces
    (15) interfaces -> NAME .

    ,               shift and go to state 51
    {               reduce using rule 15 (interfaces -> NAME .)


state 39

    (23) method_declaration -> modifiers . VOID NAME ( ) throws_declaration { }
    (24) method_declaration -> modifiers . VOID NAME ( arguments_declaration ) throws_declaration { }
    (25) method_declaration -> modifiers . NAME NAME ( ) throws_declaration { }
    (26) method_declaration -> modifiers . NAME NAME ( arguments_declaration ) throws_declaration { }
    (27) method_declaration -> modifiers . primitive_type NAME ( ) throws_declaration { }
    (28) method_declaration -> modifiers . primitive_type NAME ( arguments_declaration ) throws_declaration { }
    (31) constructor_declaration -> modifiers . NAME ( ) { }
    (32) constructor_declaration -> modifiers . NAME ( arguments_declaration ) { }
    (41) primitive_type_declaration -> modifiers . primitive_type NAME ;
    (42) list_type_declaration -> modifiers . NAME < NAME > NAME ;
    (43) having_type_declaration -> modifiers . NAME NAME ;
    (44) array_type_declaration -> modifiers . primitive_type [ ] NAME ;
    (45) array_type_declaration -> modifiers . primitive_type NAME [ ] ;
    (46) array_type_declaration -> modifiers . NAME [ ] NAME ;
    (47) array_type_declaration -> modifiers . NAME NAME [ ] ;
    (58) modifiers -> modifiers . modifier
    (48) primitive_type -> . INT
    (49) primitive_type -> . FLOAT
    (50) primitive_type -> . SHORT
    (51) primitive_type -> . CHAR
    (52) primitive_type -> . STRING
    (53) primitive_type -> . BYTE
    (54) primitive_type -> . LONG
    (55) primitive_type -> . DOUBLE
    (56) primitive_type -> . BOOLEAN
    (59) modifier -> . PUBLIC
    (60) modifier -> . PROTECTED
    (61) modifier -> . PRIVATE
    (62) modifier -> . STATIC
    (63) modifier -> . ABSTRACT
    (64) modifier -> . FINAL
    (65) modifier -> .

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
    VOID            shift and go to state 52
    NAME            shift and go to state 53
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    SHORT           shift and go to state 57
    CHAR            shift and go to state 58
    STRING          shift and go to state 59
    BYTE            shift and go to state 60
    LONG            shift and go to state 61
    DOUBLE          shift and go to state 62
    BOOLEAN         shift and go to state 63
    PUBLIC          shift and go to state 13
    PROTECTED       shift and go to state 14
    PRIVATE         shift and go to state 15
    STATIC          shift and go to state 11
    ABSTRACT        shift and go to state 16
    FINAL           shift and go to state 17

  ! VOID            [ reduce using rule 65 (modifier -> .) ]
  ! NAME            [ reduce using rule 65 (modifier -> .) ]
  ! INT             [ reduce using rule 65 (modifier -> .) ]
  ! FLOAT           [ reduce using rule 65 (modifier -> .) ]
  ! SHORT           [ reduce using rule 65 (modifier -> .) ]
  ! CHAR            [ reduce using rule 65 (modifier -> .) ]
  ! STRING          [ reduce using rule 65 (modifier -> .) ]
  ! BYTE            [ reduce using rule 65 (modifier -> .) ]
  ! LONG            [ reduce using rule 65 (modifier -> .) ]
  ! DOUBLE          [ reduce using rule 65 (modifier -> .) ]
  ! BOOLEAN         [ reduce using rule 65 (modifier -> .) ]
  ! PUBLIC          [ reduce using rule 65 (modifier -> .) ]
  ! PROTECTED       [ reduce using rule 65 (modifier -> .) ]
  ! PRIVATE         [ reduce using rule 65 (modifier -> .) ]
  ! STATIC          [ reduce using rule 65 (modifier -> .) ]
  ! ABSTRACT        [ reduce using rule 65 (modifier -> .) ]
  ! FINAL           [ reduce using rule 65 (modifier -> .) ]

    primitive_type                 shift and go to state 54
    modifier                       shift and go to state 22

state 40

    (9) class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements . }
    (16) class_body_elements -> class_body_elements . class_body_element
    (18) class_body_element -> . field_declaration
    (19) class_body_element -> . method_declaration
    (20) class_body_element -> . constructor_declaration
    (21) class_body_element -> . BLOCK_COMMENT
    (22) class_body_element -> . LINE_COMMENT
    (37) field_declaration -> . primitive_type_declaration
    (38) field_declaration -> . list_type_declaration
    (39) field_declaration -> . having_type_declaration
    (40) field_declaration -> . array_type_declaration
    (23) method_declaration -> . modifiers VOID NAME ( ) throws_declaration { }
    (24) method_declaration -> . modifiers VOID NAME ( arguments_declaration ) throws_declaration { }
    (25) method_declaration -> . modifiers NAME NAME ( ) throws_declaration { }
    (26) method_declaration -> . modifiers NAME NAME ( arguments_declaration ) throws_declaration { }
    (27) method_declaration -> . modifiers primitive_type NAME ( ) throws_declaration { }
    (28) method_declaration -> . modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { }
    (31) constructor_declaration -> . modifiers NAME ( ) { }
    (32) constructor_declaration -> . modifiers NAME ( arguments_declaration ) { }
    (41) primitive_type_declaration -> . modifiers primitive_type NAME ;
    (42) list_type_declaration -> . modifiers NAME < NAME > NAME ;
    (43) having_type_declaration -> . modifiers NAME NAME ;
    (44) array_type_declaration -> . modifiers primitive_type [ ] NAME ;
    (45) array_type_declaration -> . modifiers primitive_type NAME [ ] ;
    (46) array_type_declaration -> . modifiers NAME [ ] NAME ;
    (47) array_type_declaration -> . modifiers NAME NAME [ ] ;
    (57) modifiers -> . modifier
    (58) modifiers -> . modifiers modifier
    (59) modifier -> . PUBLIC
    (60) modifier -> . PROTECTED
    (61) modifier -> . PRIVATE
    (62) modifier -> . STATIC
    (63) modifier -> . ABSTRACT
    (64) modifier -> . FINAL
    (65) modifier -> .

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
    }               shift and go to state 64
    BLOCK_COMMENT   shift and go to state 45
    LINE_COMMENT    shift and go to state 46
    PUBLIC          shift and go to state 13
    PROTECTED       shift and go to state 14
    PRIVATE         shift and go to state 15
    STATIC          shift and go to state 11
    ABSTRACT        shift and go to state 16
    FINAL           shift and go to state 17
    VOID            reduce using rule 65 (modifier -> .)
    NAME            reduce using rule 65 (modifier -> .)
    INT             reduce using rule 65 (modifier -> .)
    FLOAT           reduce using rule 65 (modifier -> .)
    SHORT           reduce using rule 65 (modifier -> .)
    CHAR            reduce using rule 65 (modifier -> .)
    STRING          reduce using rule 65 (modifier -> .)
    BYTE            reduce using rule 65 (modifier -> .)
    LONG            reduce using rule 65 (modifier -> .)
    DOUBLE          reduce using rule 65 (modifier -> .)
    BOOLEAN         reduce using rule 65 (modifier -> .)

  ! PUBLIC          [ reduce using rule 65 (modifier -> .) ]
  ! PROTECTED       [ reduce using rule 65 (modifier -> .) ]
  ! PRIVATE         [ reduce using rule 65 (modifier -> .) ]
  ! STATIC          [ reduce using rule 65 (modifier -> .) ]
  ! ABSTRACT        [ reduce using rule 65 (modifier -> .) ]
  ! FINAL           [ reduce using rule 65 (modifier -> .) ]

    modifiers                      shift and go to state 39
    class_body_element             shift and go to state 65
    field_declaration              shift and go to state 42
    method_declaration             shift and go to state 43
    constructor_declaration        shift and go to state 44
    primitive_type_declaration     shift and go to state 47
    list_type_declaration          shift and go to state 48
    having_type_declaration        shift and go to state 49
    array_type_declaration         shift and go to state 50
    modifier                       shift and go to state 12

state 41

    (17) class_body_elements -> class_body_element .

    }               reduce using rule 17 (class_body_elements -> class_body_element .)
    BLOCK_COMMENT   reduce using rule 17 (class_body_elements -> class_body_element .)
    LINE_COMMENT    reduce using rule 17 (class_body_elements -> class_body_element .)
    PUBLIC          reduce using rule 17 (class_body_elements -> class_body_element .)
    PROTECTED       reduce using rule 17 (class_body_elements -> class_body_element .)
    PRIVATE         reduce using rule 17 (class_body_elements -> class_body_element .)
    STATIC          reduce using rule 17 (class_body_elements -> class_body_element .)
    ABSTRACT        reduce using rule 17 (class_body_elements -> class_body_element .)
    FINAL           reduce using rule 17 (class_body_elements -> class_body_element .)
    VOID            reduce using rule 17 (class_body_elements -> class_body_element .)
    NAME            reduce using rule 17 (class_body_elements -> class_body_element .)
    INT             reduce using rule 17 (class_body_elements -> class_body_element .)
    FLOAT           reduce using rule 17 (class_body_elements -> class_body_element .)
    SHORT           reduce using rule 17 (class_body_elements -> class_body_element .)
    CHAR            reduce using rule 17 (class_body_elements -> class_body_element .)
    STRING          reduce using rule 17 (class_body_elements -> class_body_element .)
    BYTE            reduce using rule 17 (class_body_elements -> class_body_element .)
    LONG            reduce using rule 17 (class_body_elements -> class_body_element .)
    DOUBLE          reduce using rule 17 (class_body_elements -> class_body_element .)
    BOOLEAN         reduce using rule 17 (class_body_elements -> class_body_element .)


state 42

    (18) class_body_element -> field_declaration .

    }               reduce using rule 18 (class_body_element -> field_declaration .)
    BLOCK_COMMENT   reduce using rule 18 (class_body_element -> field_declaration .)
    LINE_COMMENT    reduce using rule 18 (class_body_element -> field_declaration .)
    PUBLIC          reduce using rule 18 (class_body_element -> field_declaration .)
    PROTECTED       reduce using rule 18 (class_body_element -> field_declaration .)
    PRIVATE         reduce using rule 18 (class_body_element -> field_declaration .)
    STATIC          reduce using rule 18 (class_body_element -> field_declaration .)
    ABSTRACT        reduce using rule 18 (class_body_element -> field_declaration .)
    FINAL           reduce using rule 18 (class_body_element -> field_declaration .)
    VOID            reduce using rule 18 (class_body_element -> field_declaration .)
    NAME            reduce using rule 18 (class_body_element -> field_declaration .)
    INT             reduce using rule 18 (class_body_element -> field_declaration .)
    FLOAT           reduce using rule 18 (class_body_element -> field_declaration .)
    SHORT           reduce using rule 18 (class_body_element -> field_declaration .)
    CHAR            reduce using rule 18 (class_body_element -> field_declaration .)
    STRING          reduce using rule 18 (class_body_element -> field_declaration .)
    BYTE            reduce using rule 18 (class_body_element -> field_declaration .)
    LONG            reduce using rule 18 (class_body_element -> field_declaration .)
    DOUBLE          reduce using rule 18 (class_body_element -> field_declaration .)
    BOOLEAN         reduce using rule 18 (class_body_element -> field_declaration .)


state 43

    (19) class_body_element -> method_declaration .

    }               reduce using rule 19 (class_body_element -> method_declaration .)
    BLOCK_COMMENT   reduce using rule 19 (class_body_element -> method_declaration .)
    LINE_COMMENT    reduce using rule 19 (class_body_element -> method_declaration .)
    PUBLIC          reduce using rule 19 (class_body_element -> method_declaration .)
    PROTECTED       reduce using rule 19 (class_body_element -> method_declaration .)
    PRIVATE         reduce using rule 19 (class_body_element -> method_declaration .)
    STATIC          reduce using rule 19 (class_body_element -> method_declaration .)
    ABSTRACT        reduce using rule 19 (class_body_element -> method_declaration .)
    FINAL           reduce using rule 19 (class_body_element -> method_declaration .)
    VOID            reduce using rule 19 (class_body_element -> method_declaration .)
    NAME            reduce using rule 19 (class_body_element -> method_declaration .)
    INT             reduce using rule 19 (class_body_element -> method_declaration .)
    FLOAT           reduce using rule 19 (class_body_element -> method_declaration .)
    SHORT           reduce using rule 19 (class_body_element -> method_declaration .)
    CHAR            reduce using rule 19 (class_body_element -> method_declaration .)
    STRING          reduce using rule 19 (class_body_element -> method_declaration .)
    BYTE            reduce using rule 19 (class_body_element -> method_declaration .)
    LONG            reduce using rule 19 (class_body_element -> method_declaration .)
    DOUBLE          reduce using rule 19 (class_body_element -> method_declaration .)
    BOOLEAN         reduce using rule 19 (class_body_element -> method_declaration .)


state 44

    (20) class_body_element -> constructor_declaration .

    }               reduce using rule 20 (class_body_element -> constructor_declaration .)
    BLOCK_COMMENT   reduce using rule 20 (class_body_element -> constructor_declaration .)
    LINE_COMMENT    reduce using rule 20 (class_body_element -> constructor_declaration .)
    PUBLIC          reduce using rule 20 (class_body_element -> constructor_declaration .)
    PROTECTED       reduce using rule 20 (class_body_element -> constructor_declaration .)
    PRIVATE         reduce using rule 20 (class_body_element -> constructor_declaration .)
    STATIC          reduce using rule 20 (class_body_element -> constructor_declaration .)
    ABSTRACT        reduce using rule 20 (class_body_element -> constructor_declaration .)
    FINAL           reduce using rule 20 (class_body_element -> constructor_declaration .)
    VOID            reduce using rule 20 (class_body_element -> constructor_declaration .)
    NAME            reduce using rule 20 (class_body_element -> constructor_declaration .)
    INT             reduce using rule 20 (class_body_element -> constructor_declaration .)
    FLOAT           reduce using rule 20 (class_body_element -> constructor_declaration .)
    SHORT           reduce using rule 20 (class_body_element -> constructor_declaration .)
    CHAR            reduce using rule 20 (class_body_element -> constructor_declaration .)
    STRING          reduce using rule 20 (class_body_element -> constructor_declaration .)
    BYTE            reduce using rule 20 (class_body_element -> constructor_declaration .)
    LONG            reduce using rule 20 (class_body_element -> constructor_declaration .)
    DOUBLE          reduce using rule 20 (class_body_element -> constructor_declaration .)
    BOOLEAN         reduce using rule 20 (class_body_element -> constructor_declaration .)


state 45

    (21) class_body_element -> BLOCK_COMMENT .

    }               reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    BLOCK_COMMENT   reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    LINE_COMMENT    reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    PUBLIC          reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    PROTECTED       reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    PRIVATE         reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    STATIC          reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    ABSTRACT        reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    FINAL           reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    VOID            reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    NAME            reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    INT             reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    FLOAT           reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    SHORT           reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    CHAR            reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    STRING          reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    BYTE            reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    LONG            reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    DOUBLE          reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)
    BOOLEAN         reduce using rule 21 (class_body_element -> BLOCK_COMMENT .)


state 46

    (22) class_body_element -> LINE_COMMENT .

    }               reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    BLOCK_COMMENT   reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    LINE_COMMENT    reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    PUBLIC          reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    PROTECTED       reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    PRIVATE         reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    STATIC          reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    ABSTRACT        reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    FINAL           reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    VOID            reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    NAME            reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    INT             reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    FLOAT           reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    SHORT           reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    CHAR            reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    STRING          reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    BYTE            reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    LONG            reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    DOUBLE          reduce using rule 22 (class_body_element -> LINE_COMMENT .)
    BOOLEAN         reduce using rule 22 (class_body_element -> LINE_COMMENT .)


state 47

    (37) field_declaration -> primitive_type_declaration .

    }               reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    BLOCK_COMMENT   reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    LINE_COMMENT    reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    PUBLIC          reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    PROTECTED       reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    PRIVATE         reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    STATIC          reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    ABSTRACT        reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    FINAL           reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    VOID            reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    NAME            reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    INT             reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    FLOAT           reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    SHORT           reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    CHAR            reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    STRING          reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    BYTE            reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    LONG            reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    DOUBLE          reduce using rule 37 (field_declaration -> primitive_type_declaration .)
    BOOLEAN         reduce using rule 37 (field_declaration -> primitive_type_declaration .)


state 48

    (38) field_declaration -> list_type_declaration .

    }               reduce using rule 38 (field_declaration -> list_type_declaration .)
    BLOCK_COMMENT   reduce using rule 38 (field_declaration -> list_type_declaration .)
    LINE_COMMENT    reduce using rule 38 (field_declaration -> list_type_declaration .)
    PUBLIC          reduce using rule 38 (field_declaration -> list_type_declaration .)
    PROTECTED       reduce using rule 38 (field_declaration -> list_type_declaration .)
    PRIVATE         reduce using rule 38 (field_declaration -> list_type_declaration .)
    STATIC          reduce using rule 38 (field_declaration -> list_type_declaration .)
    ABSTRACT        reduce using rule 38 (field_declaration -> list_type_declaration .)
    FINAL           reduce using rule 38 (field_declaration -> list_type_declaration .)
    VOID            reduce using rule 38 (field_declaration -> list_type_declaration .)
    NAME            reduce using rule 38 (field_declaration -> list_type_declaration .)
    INT             reduce using rule 38 (field_declaration -> list_type_declaration .)
    FLOAT           reduce using rule 38 (field_declaration -> list_type_declaration .)
    SHORT           reduce using rule 38 (field_declaration -> list_type_declaration .)
    CHAR            reduce using rule 38 (field_declaration -> list_type_declaration .)
    STRING          reduce using rule 38 (field_declaration -> list_type_declaration .)
    BYTE            reduce using rule 38 (field_declaration -> list_type_declaration .)
    LONG            reduce using rule 38 (field_declaration -> list_type_declaration .)
    DOUBLE          reduce using rule 38 (field_declaration -> list_type_declaration .)
    BOOLEAN         reduce using rule 38 (field_declaration -> list_type_declaration .)


state 49

    (39) field_declaration -> having_type_declaration .

    }               reduce using rule 39 (field_declaration -> having_type_declaration .)
    BLOCK_COMMENT   reduce using rule 39 (field_declaration -> having_type_declaration .)
    LINE_COMMENT    reduce using rule 39 (field_declaration -> having_type_declaration .)
    PUBLIC          reduce using rule 39 (field_declaration -> having_type_declaration .)
    PROTECTED       reduce using rule 39 (field_declaration -> having_type_declaration .)
    PRIVATE         reduce using rule 39 (field_declaration -> having_type_declaration .)
    STATIC          reduce using rule 39 (field_declaration -> having_type_declaration .)
    ABSTRACT        reduce using rule 39 (field_declaration -> having_type_declaration .)
    FINAL           reduce using rule 39 (field_declaration -> having_type_declaration .)
    VOID            reduce using rule 39 (field_declaration -> having_type_declaration .)
    NAME            reduce using rule 39 (field_declaration -> having_type_declaration .)
    INT             reduce using rule 39 (field_declaration -> having_type_declaration .)
    FLOAT           reduce using rule 39 (field_declaration -> having_type_declaration .)
    SHORT           reduce using rule 39 (field_declaration -> having_type_declaration .)
    CHAR            reduce using rule 39 (field_declaration -> having_type_declaration .)
    STRING          reduce using rule 39 (field_declaration -> having_type_declaration .)
    BYTE            reduce using rule 39 (field_declaration -> having_type_declaration .)
    LONG            reduce using rule 39 (field_declaration -> having_type_declaration .)
    DOUBLE          reduce using rule 39 (field_declaration -> having_type_declaration .)
    BOOLEAN         reduce using rule 39 (field_declaration -> having_type_declaration .)


state 50

    (40) field_declaration -> array_type_declaration .

    }               reduce using rule 40 (field_declaration -> array_type_declaration .)
    BLOCK_COMMENT   reduce using rule 40 (field_declaration -> array_type_declaration .)
    LINE_COMMENT    reduce using rule 40 (field_declaration -> array_type_declaration .)
    PUBLIC          reduce using rule 40 (field_declaration -> array_type_declaration .)
    PROTECTED       reduce using rule 40 (field_declaration -> array_type_declaration .)
    PRIVATE         reduce using rule 40 (field_declaration -> array_type_declaration .)
    STATIC          reduce using rule 40 (field_declaration -> array_type_declaration .)
    ABSTRACT        reduce using rule 40 (field_declaration -> array_type_declaration .)
    FINAL           reduce using rule 40 (field_declaration -> array_type_declaration .)
    VOID            reduce using rule 40 (field_declaration -> array_type_declaration .)
    NAME            reduce using rule 40 (field_declaration -> array_type_declaration .)
    INT             reduce using rule 40 (field_declaration -> array_type_declaration .)
    FLOAT           reduce using rule 40 (field_declaration -> array_type_declaration .)
    SHORT           reduce using rule 40 (field_declaration -> array_type_declaration .)
    CHAR            reduce using rule 40 (field_declaration -> array_type_declaration .)
    STRING          reduce using rule 40 (field_declaration -> array_type_declaration .)
    BYTE            reduce using rule 40 (field_declaration -> array_type_declaration .)
    LONG            reduce using rule 40 (field_declaration -> array_type_declaration .)
    DOUBLE          reduce using rule 40 (field_declaration -> array_type_declaration .)
    BOOLEAN         reduce using rule 40 (field_declaration -> array_type_declaration .)


state 51

    (14) interfaces -> NAME , . interfaces
    (14) interfaces -> . NAME , interfaces
    (15) interfaces -> . NAME

    NAME            shift and go to state 38

    interfaces                     shift and go to state 66

state 52

    (23) method_declaration -> modifiers VOID . NAME ( ) throws_declaration { }
    (24) method_declaration -> modifiers VOID . NAME ( arguments_declaration ) throws_declaration { }

    NAME            shift and go to state 67


state 53

    (25) method_declaration -> modifiers NAME . NAME ( ) throws_declaration { }
    (26) method_declaration -> modifiers NAME . NAME ( arguments_declaration ) throws_declaration { }
    (31) constructor_declaration -> modifiers NAME . ( ) { }
    (32) constructor_declaration -> modifiers NAME . ( arguments_declaration ) { }
    (42) list_type_declaration -> modifiers NAME . < NAME > NAME ;
    (43) having_type_declaration -> modifiers NAME . NAME ;
    (46) array_type_declaration -> modifiers NAME . [ ] NAME ;
    (47) array_type_declaration -> modifiers NAME . NAME [ ] ;

    NAME            shift and go to state 68
    (               shift and go to state 69
    <               shift and go to state 70
    [               shift and go to state 71


state 54

    (27) method_declaration -> modifiers primitive_type . NAME ( ) throws_declaration { }
    (28) method_declaration -> modifiers primitive_type . NAME ( arguments_declaration ) throws_declaration { }
    (41) primitive_type_declaration -> modifiers primitive_type . NAME ;
    (44) array_type_declaration -> modifiers primitive_type . [ ] NAME ;
    (45) array_type_declaration -> modifiers primitive_type . NAME [ ] ;

    NAME            shift and go to state 72
    [               shift and go to state 73


state 55

    (48) primitive_type -> INT .

    NAME            reduce using rule 48 (primitive_type -> INT .)
    [               reduce using rule 48 (primitive_type -> INT .)


state 56

    (49) primitive_type -> FLOAT .

    NAME            reduce using rule 49 (primitive_type -> FLOAT .)
    [               reduce using rule 49 (primitive_type -> FLOAT .)


state 57

    (50) primitive_type -> SHORT .

    NAME            reduce using rule 50 (primitive_type -> SHORT .)
    [               reduce using rule 50 (primitive_type -> SHORT .)


state 58

    (51) primitive_type -> CHAR .

    NAME            reduce using rule 51 (primitive_type -> CHAR .)
    [               reduce using rule 51 (primitive_type -> CHAR .)


state 59

    (52) primitive_type -> STRING .

    NAME            reduce using rule 52 (primitive_type -> STRING .)
    [               reduce using rule 52 (primitive_type -> STRING .)


state 60

    (53) primitive_type -> BYTE .

    NAME            reduce using rule 53 (primitive_type -> BYTE .)
    [               reduce using rule 53 (primitive_type -> BYTE .)


state 61

    (54) primitive_type -> LONG .

    NAME            reduce using rule 54 (primitive_type -> LONG .)
    [               reduce using rule 54 (primitive_type -> LONG .)


state 62

    (55) primitive_type -> DOUBLE .

    NAME            reduce using rule 55 (primitive_type -> DOUBLE .)
    [               reduce using rule 55 (primitive_type -> DOUBLE .)


state 63

    (56) primitive_type -> BOOLEAN .

    NAME            reduce using rule 56 (primitive_type -> BOOLEAN .)
    [               reduce using rule 56 (primitive_type -> BOOLEAN .)


state 64

    (9) class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements } .

    $end            reduce using rule 9 (class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements } .)


state 65

    (16) class_body_elements -> class_body_elements class_body_element .

    }               reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    BLOCK_COMMENT   reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    LINE_COMMENT    reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    PUBLIC          reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    PROTECTED       reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    PRIVATE         reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    STATIC          reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    ABSTRACT        reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    FINAL           reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    VOID            reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    NAME            reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    INT             reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    FLOAT           reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    SHORT           reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    CHAR            reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    STRING          reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    BYTE            reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    LONG            reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    DOUBLE          reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)
    BOOLEAN         reduce using rule 16 (class_body_elements -> class_body_elements class_body_element .)


state 66

    (14) interfaces -> NAME , interfaces .

    {               reduce using rule 14 (interfaces -> NAME , interfaces .)


state 67

    (23) method_declaration -> modifiers VOID NAME . ( ) throws_declaration { }
    (24) method_declaration -> modifiers VOID NAME . ( arguments_declaration ) throws_declaration { }

    (               shift and go to state 74


state 68

    (25) method_declaration -> modifiers NAME NAME . ( ) throws_declaration { }
    (26) method_declaration -> modifiers NAME NAME . ( arguments_declaration ) throws_declaration { }
    (43) having_type_declaration -> modifiers NAME NAME . ;
    (47) array_type_declaration -> modifiers NAME NAME . [ ] ;

    (               shift and go to state 75
    ;               shift and go to state 76
    [               shift and go to state 77


state 69

    (31) constructor_declaration -> modifiers NAME ( . ) { }
    (32) constructor_declaration -> modifiers NAME ( . arguments_declaration ) { }
    (33) arguments_declaration -> . argument , arguments_declaration
    (34) arguments_declaration -> . argument
    (35) argument -> . primitive_type NAME
    (36) argument -> . NAME NAME
    (48) primitive_type -> . INT
    (49) primitive_type -> . FLOAT
    (50) primitive_type -> . SHORT
    (51) primitive_type -> . CHAR
    (52) primitive_type -> . STRING
    (53) primitive_type -> . BYTE
    (54) primitive_type -> . LONG
    (55) primitive_type -> . DOUBLE
    (56) primitive_type -> . BOOLEAN

    )               shift and go to state 79
    NAME            shift and go to state 78
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    SHORT           shift and go to state 57
    CHAR            shift and go to state 58
    STRING          shift and go to state 59
    BYTE            shift and go to state 60
    LONG            shift and go to state 61
    DOUBLE          shift and go to state 62
    BOOLEAN         shift and go to state 63

    arguments_declaration          shift and go to state 80
    argument                       shift and go to state 81
    primitive_type                 shift and go to state 82

state 70

    (42) list_type_declaration -> modifiers NAME < . NAME > NAME ;

    NAME            shift and go to state 83


state 71

    (46) array_type_declaration -> modifiers NAME [ . ] NAME ;

    ]               shift and go to state 84


state 72

    (27) method_declaration -> modifiers primitive_type NAME . ( ) throws_declaration { }
    (28) method_declaration -> modifiers primitive_type NAME . ( arguments_declaration ) throws_declaration { }
    (41) primitive_type_declaration -> modifiers primitive_type NAME . ;
    (45) array_type_declaration -> modifiers primitive_type NAME . [ ] ;

    (               shift and go to state 85
    ;               shift and go to state 86
    [               shift and go to state 87


state 73

    (44) array_type_declaration -> modifiers primitive_type [ . ] NAME ;

    ]               shift and go to state 88


state 74

    (23) method_declaration -> modifiers VOID NAME ( . ) throws_declaration { }
    (24) method_declaration -> modifiers VOID NAME ( . arguments_declaration ) throws_declaration { }
    (33) arguments_declaration -> . argument , arguments_declaration
    (34) arguments_declaration -> . argument
    (35) argument -> . primitive_type NAME
    (36) argument -> . NAME NAME
    (48) primitive_type -> . INT
    (49) primitive_type -> . FLOAT
    (50) primitive_type -> . SHORT
    (51) primitive_type -> . CHAR
    (52) primitive_type -> . STRING
    (53) primitive_type -> . BYTE
    (54) primitive_type -> . LONG
    (55) primitive_type -> . DOUBLE
    (56) primitive_type -> . BOOLEAN

    )               shift and go to state 89
    NAME            shift and go to state 78
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    SHORT           shift and go to state 57
    CHAR            shift and go to state 58
    STRING          shift and go to state 59
    BYTE            shift and go to state 60
    LONG            shift and go to state 61
    DOUBLE          shift and go to state 62
    BOOLEAN         shift and go to state 63

    arguments_declaration          shift and go to state 90
    argument                       shift and go to state 81
    primitive_type                 shift and go to state 82

state 75

    (25) method_declaration -> modifiers NAME NAME ( . ) throws_declaration { }
    (26) method_declaration -> modifiers NAME NAME ( . arguments_declaration ) throws_declaration { }
    (33) arguments_declaration -> . argument , arguments_declaration
    (34) arguments_declaration -> . argument
    (35) argument -> . primitive_type NAME
    (36) argument -> . NAME NAME
    (48) primitive_type -> . INT
    (49) primitive_type -> . FLOAT
    (50) primitive_type -> . SHORT
    (51) primitive_type -> . CHAR
    (52) primitive_type -> . STRING
    (53) primitive_type -> . BYTE
    (54) primitive_type -> . LONG
    (55) primitive_type -> . DOUBLE
    (56) primitive_type -> . BOOLEAN

    )               shift and go to state 91
    NAME            shift and go to state 78
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    SHORT           shift and go to state 57
    CHAR            shift and go to state 58
    STRING          shift and go to state 59
    BYTE            shift and go to state 60
    LONG            shift and go to state 61
    DOUBLE          shift and go to state 62
    BOOLEAN         shift and go to state 63

    arguments_declaration          shift and go to state 92
    argument                       shift and go to state 81
    primitive_type                 shift and go to state 82

state 76

    (43) having_type_declaration -> modifiers NAME NAME ; .

    }               reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    BLOCK_COMMENT   reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    LINE_COMMENT    reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    PUBLIC          reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    PROTECTED       reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    PRIVATE         reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    STATIC          reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    ABSTRACT        reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    FINAL           reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    VOID            reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    NAME            reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    INT             reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    FLOAT           reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    SHORT           reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    CHAR            reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    STRING          reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    BYTE            reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    LONG            reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    DOUBLE          reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)
    BOOLEAN         reduce using rule 43 (having_type_declaration -> modifiers NAME NAME ; .)


state 77

    (47) array_type_declaration -> modifiers NAME NAME [ . ] ;

    ]               shift and go to state 93


state 78

    (36) argument -> NAME . NAME

    NAME            shift and go to state 94


state 79

    (31) constructor_declaration -> modifiers NAME ( ) . { }

    {               shift and go to state 95


state 80

    (32) constructor_declaration -> modifiers NAME ( arguments_declaration . ) { }

    )               shift and go to state 96


state 81

    (33) arguments_declaration -> argument . , arguments_declaration
    (34) arguments_declaration -> argument .

    ,               shift and go to state 97
    )               reduce using rule 34 (arguments_declaration -> argument .)


state 82

    (35) argument -> primitive_type . NAME

    NAME            shift and go to state 98


state 83

    (42) list_type_declaration -> modifiers NAME < NAME . > NAME ;

    >               shift and go to state 99


state 84

    (46) array_type_declaration -> modifiers NAME [ ] . NAME ;

    NAME            shift and go to state 100


state 85

    (27) method_declaration -> modifiers primitive_type NAME ( . ) throws_declaration { }
    (28) method_declaration -> modifiers primitive_type NAME ( . arguments_declaration ) throws_declaration { }
    (33) arguments_declaration -> . argument , arguments_declaration
    (34) arguments_declaration -> . argument
    (35) argument -> . primitive_type NAME
    (36) argument -> . NAME NAME
    (48) primitive_type -> . INT
    (49) primitive_type -> . FLOAT
    (50) primitive_type -> . SHORT
    (51) primitive_type -> . CHAR
    (52) primitive_type -> . STRING
    (53) primitive_type -> . BYTE
    (54) primitive_type -> . LONG
    (55) primitive_type -> . DOUBLE
    (56) primitive_type -> . BOOLEAN

    )               shift and go to state 101
    NAME            shift and go to state 78
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    SHORT           shift and go to state 57
    CHAR            shift and go to state 58
    STRING          shift and go to state 59
    BYTE            shift and go to state 60
    LONG            shift and go to state 61
    DOUBLE          shift and go to state 62
    BOOLEAN         shift and go to state 63

    primitive_type                 shift and go to state 82
    arguments_declaration          shift and go to state 102
    argument                       shift and go to state 81

state 86

    (41) primitive_type_declaration -> modifiers primitive_type NAME ; .

    }               reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    BLOCK_COMMENT   reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    LINE_COMMENT    reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    PUBLIC          reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    PROTECTED       reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    PRIVATE         reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    STATIC          reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    ABSTRACT        reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    FINAL           reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    VOID            reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    NAME            reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    INT             reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    FLOAT           reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    SHORT           reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    CHAR            reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    STRING          reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    BYTE            reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    LONG            reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    DOUBLE          reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    BOOLEAN         reduce using rule 41 (primitive_type_declaration -> modifiers primitive_type NAME ; .)


state 87

    (45) array_type_declaration -> modifiers primitive_type NAME [ . ] ;

    ]               shift and go to state 103


state 88

    (44) array_type_declaration -> modifiers primitive_type [ ] . NAME ;

    NAME            shift and go to state 104


state 89

    (23) method_declaration -> modifiers VOID NAME ( ) . throws_declaration { }
    (29) throws_declaration -> . THROWS NAME
    (30) throws_declaration -> .

    THROWS          shift and go to state 106
    {               reduce using rule 30 (throws_declaration -> .)

    throws_declaration             shift and go to state 105

state 90

    (24) method_declaration -> modifiers VOID NAME ( arguments_declaration . ) throws_declaration { }

    )               shift and go to state 107


state 91

    (25) method_declaration -> modifiers NAME NAME ( ) . throws_declaration { }
    (29) throws_declaration -> . THROWS NAME
    (30) throws_declaration -> .

    THROWS          shift and go to state 106
    {               reduce using rule 30 (throws_declaration -> .)

    throws_declaration             shift and go to state 108

state 92

    (26) method_declaration -> modifiers NAME NAME ( arguments_declaration . ) throws_declaration { }

    )               shift and go to state 109


state 93

    (47) array_type_declaration -> modifiers NAME NAME [ ] . ;

    ;               shift and go to state 110


state 94

    (36) argument -> NAME NAME .

    ,               reduce using rule 36 (argument -> NAME NAME .)
    )               reduce using rule 36 (argument -> NAME NAME .)


state 95

    (31) constructor_declaration -> modifiers NAME ( ) { . }

    }               shift and go to state 111


state 96

    (32) constructor_declaration -> modifiers NAME ( arguments_declaration ) . { }

    {               shift and go to state 112


state 97

    (33) arguments_declaration -> argument , . arguments_declaration
    (33) arguments_declaration -> . argument , arguments_declaration
    (34) arguments_declaration -> . argument
    (35) argument -> . primitive_type NAME
    (36) argument -> . NAME NAME
    (48) primitive_type -> . INT
    (49) primitive_type -> . FLOAT
    (50) primitive_type -> . SHORT
    (51) primitive_type -> . CHAR
    (52) primitive_type -> . STRING
    (53) primitive_type -> . BYTE
    (54) primitive_type -> . LONG
    (55) primitive_type -> . DOUBLE
    (56) primitive_type -> . BOOLEAN

    NAME            shift and go to state 78
    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    SHORT           shift and go to state 57
    CHAR            shift and go to state 58
    STRING          shift and go to state 59
    BYTE            shift and go to state 60
    LONG            shift and go to state 61
    DOUBLE          shift and go to state 62
    BOOLEAN         shift and go to state 63

    argument                       shift and go to state 81
    arguments_declaration          shift and go to state 113
    primitive_type                 shift and go to state 82

state 98

    (35) argument -> primitive_type NAME .

    ,               reduce using rule 35 (argument -> primitive_type NAME .)
    )               reduce using rule 35 (argument -> primitive_type NAME .)


state 99

    (42) list_type_declaration -> modifiers NAME < NAME > . NAME ;

    NAME            shift and go to state 114


state 100

    (46) array_type_declaration -> modifiers NAME [ ] NAME . ;

    ;               shift and go to state 115


state 101

    (27) method_declaration -> modifiers primitive_type NAME ( ) . throws_declaration { }
    (29) throws_declaration -> . THROWS NAME
    (30) throws_declaration -> .

    THROWS          shift and go to state 106
    {               reduce using rule 30 (throws_declaration -> .)

    throws_declaration             shift and go to state 116

state 102

    (28) method_declaration -> modifiers primitive_type NAME ( arguments_declaration . ) throws_declaration { }

    )               shift and go to state 117


state 103

    (45) array_type_declaration -> modifiers primitive_type NAME [ ] . ;

    ;               shift and go to state 118


state 104

    (44) array_type_declaration -> modifiers primitive_type [ ] NAME . ;

    ;               shift and go to state 119


state 105

    (23) method_declaration -> modifiers VOID NAME ( ) throws_declaration . { }

    {               shift and go to state 120


state 106

    (29) throws_declaration -> THROWS . NAME

    NAME            shift and go to state 121


state 107

    (24) method_declaration -> modifiers VOID NAME ( arguments_declaration ) . throws_declaration { }
    (29) throws_declaration -> . THROWS NAME
    (30) throws_declaration -> .

    THROWS          shift and go to state 106
    {               reduce using rule 30 (throws_declaration -> .)

    throws_declaration             shift and go to state 122

state 108

    (25) method_declaration -> modifiers NAME NAME ( ) throws_declaration . { }

    {               shift and go to state 123


state 109

    (26) method_declaration -> modifiers NAME NAME ( arguments_declaration ) . throws_declaration { }
    (29) throws_declaration -> . THROWS NAME
    (30) throws_declaration -> .

    THROWS          shift and go to state 106
    {               reduce using rule 30 (throws_declaration -> .)

    throws_declaration             shift and go to state 124

state 110

    (47) array_type_declaration -> modifiers NAME NAME [ ] ; .

    }               reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    BLOCK_COMMENT   reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    LINE_COMMENT    reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    PUBLIC          reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    PROTECTED       reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    PRIVATE         reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    STATIC          reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    ABSTRACT        reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    FINAL           reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    VOID            reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    NAME            reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    INT             reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    FLOAT           reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    SHORT           reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    CHAR            reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    STRING          reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    BYTE            reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    LONG            reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    DOUBLE          reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    BOOLEAN         reduce using rule 47 (array_type_declaration -> modifiers NAME NAME [ ] ; .)


state 111

    (31) constructor_declaration -> modifiers NAME ( ) { } .

    }               reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    BLOCK_COMMENT   reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    LINE_COMMENT    reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    PUBLIC          reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    PROTECTED       reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    PRIVATE         reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    STATIC          reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    ABSTRACT        reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    FINAL           reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    VOID            reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    NAME            reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    INT             reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    FLOAT           reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    SHORT           reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    CHAR            reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    STRING          reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    BYTE            reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    LONG            reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    DOUBLE          reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)
    BOOLEAN         reduce using rule 31 (constructor_declaration -> modifiers NAME ( ) { } .)


state 112

    (32) constructor_declaration -> modifiers NAME ( arguments_declaration ) { . }

    }               shift and go to state 125


state 113

    (33) arguments_declaration -> argument , arguments_declaration .

    )               reduce using rule 33 (arguments_declaration -> argument , arguments_declaration .)


state 114

    (42) list_type_declaration -> modifiers NAME < NAME > NAME . ;

    ;               shift and go to state 126


state 115

    (46) array_type_declaration -> modifiers NAME [ ] NAME ; .

    }               reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    BLOCK_COMMENT   reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    LINE_COMMENT    reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    PUBLIC          reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    PROTECTED       reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    PRIVATE         reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    STATIC          reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    ABSTRACT        reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    FINAL           reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    VOID            reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    NAME            reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    INT             reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    FLOAT           reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    SHORT           reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    CHAR            reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    STRING          reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    BYTE            reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    LONG            reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    DOUBLE          reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    BOOLEAN         reduce using rule 46 (array_type_declaration -> modifiers NAME [ ] NAME ; .)


state 116

    (27) method_declaration -> modifiers primitive_type NAME ( ) throws_declaration . { }

    {               shift and go to state 127


state 117

    (28) method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) . throws_declaration { }
    (29) throws_declaration -> . THROWS NAME
    (30) throws_declaration -> .

    THROWS          shift and go to state 106
    {               reduce using rule 30 (throws_declaration -> .)

    throws_declaration             shift and go to state 128

state 118

    (45) array_type_declaration -> modifiers primitive_type NAME [ ] ; .

    }               reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    BLOCK_COMMENT   reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    LINE_COMMENT    reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    PUBLIC          reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    PROTECTED       reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    PRIVATE         reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    STATIC          reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    ABSTRACT        reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    FINAL           reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    VOID            reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    NAME            reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    INT             reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    FLOAT           reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    SHORT           reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    CHAR            reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    STRING          reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    BYTE            reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    LONG            reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    DOUBLE          reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    BOOLEAN         reduce using rule 45 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)


state 119

    (44) array_type_declaration -> modifiers primitive_type [ ] NAME ; .

    }               reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    BLOCK_COMMENT   reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    LINE_COMMENT    reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    PUBLIC          reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    PROTECTED       reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    PRIVATE         reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    STATIC          reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    ABSTRACT        reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    FINAL           reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    VOID            reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    NAME            reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    INT             reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    FLOAT           reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    SHORT           reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    CHAR            reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    STRING          reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    BYTE            reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    LONG            reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    DOUBLE          reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    BOOLEAN         reduce using rule 44 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)


state 120

    (23) method_declaration -> modifiers VOID NAME ( ) throws_declaration { . }

    }               shift and go to state 129


state 121

    (29) throws_declaration -> THROWS NAME .

    {               reduce using rule 29 (throws_declaration -> THROWS NAME .)


state 122

    (24) method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration . { }

    {               shift and go to state 130


state 123

    (25) method_declaration -> modifiers NAME NAME ( ) throws_declaration { . }

    }               shift and go to state 131


state 124

    (26) method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration . { }

    {               shift and go to state 132


state 125

    (32) constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .

    }               reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    BLOCK_COMMENT   reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    LINE_COMMENT    reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    PUBLIC          reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    PROTECTED       reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    PRIVATE         reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    STATIC          reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    ABSTRACT        reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    FINAL           reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    VOID            reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    NAME            reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    INT             reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    FLOAT           reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    SHORT           reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    CHAR            reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    STRING          reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    BYTE            reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    LONG            reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    DOUBLE          reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    BOOLEAN         reduce using rule 32 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)


state 126

    (42) list_type_declaration -> modifiers NAME < NAME > NAME ; .

    }               reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    BLOCK_COMMENT   reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    LINE_COMMENT    reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    PUBLIC          reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    PROTECTED       reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    PRIVATE         reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    STATIC          reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    ABSTRACT        reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    FINAL           reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    VOID            reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    NAME            reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    INT             reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    FLOAT           reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    SHORT           reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    CHAR            reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    STRING          reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    BYTE            reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    LONG            reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    DOUBLE          reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    BOOLEAN         reduce using rule 42 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)


state 127

    (27) method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { . }

    }               shift and go to state 133


state 128

    (28) method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration . { }

    {               shift and go to state 134


state 129

    (23) method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .

    }               reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    BLOCK_COMMENT   reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    LINE_COMMENT    reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    PUBLIC          reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    PROTECTED       reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    PRIVATE         reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    STATIC          reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    ABSTRACT        reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    FINAL           reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    VOID            reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    NAME            reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    INT             reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    FLOAT           reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    SHORT           reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    CHAR            reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    STRING          reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    BYTE            reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    LONG            reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    DOUBLE          reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)
    BOOLEAN         reduce using rule 23 (method_declaration -> modifiers VOID NAME ( ) throws_declaration { } .)


state 130

    (24) method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { . }

    }               shift and go to state 135


state 131

    (25) method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .

    }               reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    BLOCK_COMMENT   reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    LINE_COMMENT    reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    PUBLIC          reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    PROTECTED       reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    PRIVATE         reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    STATIC          reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    ABSTRACT        reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    FINAL           reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    VOID            reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    NAME            reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    INT             reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    FLOAT           reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    SHORT           reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    CHAR            reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    STRING          reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    BYTE            reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    LONG            reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    DOUBLE          reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)
    BOOLEAN         reduce using rule 25 (method_declaration -> modifiers NAME NAME ( ) throws_declaration { } .)


state 132

    (26) method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { . }

    }               shift and go to state 136


state 133

    (27) method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .

    }               reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    BLOCK_COMMENT   reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    LINE_COMMENT    reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    PUBLIC          reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    PROTECTED       reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    PRIVATE         reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    STATIC          reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    ABSTRACT        reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    FINAL           reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    VOID            reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    NAME            reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    INT             reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    FLOAT           reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    SHORT           reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    CHAR            reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    STRING          reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    BYTE            reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    LONG            reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    DOUBLE          reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)
    BOOLEAN         reduce using rule 27 (method_declaration -> modifiers primitive_type NAME ( ) throws_declaration { } .)


state 134

    (28) method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { . }

    }               shift and go to state 137


state 135

    (24) method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .

    }               reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    BLOCK_COMMENT   reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    LINE_COMMENT    reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    PUBLIC          reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    PROTECTED       reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    PRIVATE         reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    STATIC          reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    ABSTRACT        reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    FINAL           reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    VOID            reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    NAME            reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    INT             reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    FLOAT           reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    SHORT           reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    CHAR            reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    STRING          reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    BYTE            reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    LONG            reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    DOUBLE          reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)
    BOOLEAN         reduce using rule 24 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) throws_declaration { } .)


state 136

    (26) method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .

    }               reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    BLOCK_COMMENT   reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    LINE_COMMENT    reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    PUBLIC          reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    PROTECTED       reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    PRIVATE         reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    STATIC          reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    ABSTRACT        reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    FINAL           reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    VOID            reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    NAME            reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    INT             reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    FLOAT           reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    SHORT           reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    CHAR            reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    STRING          reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    BYTE            reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    LONG            reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    DOUBLE          reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)
    BOOLEAN         reduce using rule 26 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) throws_declaration { } .)


state 137

    (28) method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .

    }               reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    BLOCK_COMMENT   reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    LINE_COMMENT    reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    PUBLIC          reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    PROTECTED       reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    PRIVATE         reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    STATIC          reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    ABSTRACT        reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    FINAL           reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    VOID            reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    NAME            reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    INT             reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    FLOAT           reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    SHORT           reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    CHAR            reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    STRING          reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    BYTE            reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    LONG            reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    DOUBLE          reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)
    BOOLEAN         reduce using rule 28 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) throws_declaration { } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PUBLIC in state 4 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 4 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 4 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 4 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 4 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 4 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 10 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 10 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 10 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 10 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 10 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 10 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 10 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 36 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 36 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 36 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 36 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 36 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 36 resolved as shift
WARNING: shift/reduce conflict for VOID in state 39 resolved as shift
WARNING: shift/reduce conflict for NAME in state 39 resolved as shift
WARNING: shift/reduce conflict for INT in state 39 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 39 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 39 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 39 resolved as shift
WARNING: shift/reduce conflict for STRING in state 39 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 39 resolved as shift
WARNING: shift/reduce conflict for LONG in state 39 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 39 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 39 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 39 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 39 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 39 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 39 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 39 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 39 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 40 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 40 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 40 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 40 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 40 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 40 resolved as shift
