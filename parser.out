Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BLOCK_COMMENT
    BOOLEAN
    CHAR_LITERAL
    FALSE
    LINE_COMMENT
    NULL
    NUM
    STRING_LITERAL
    SUPER
    THROWS
    TRUE

Grammar

Rule 0     S' -> start
Rule 1     start -> package_declaration imports_declaration class_declaration
Rule 2     package_declaration -> PACKAGE NAME ;
Rule 3     imports_declaration -> imports_declaration import_declaration
Rule 4     imports_declaration -> import_declaration
Rule 5     import_declaration -> IMPORT NAME ;
Rule 6     class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements }
Rule 7     extends_declaration -> EXTENDS NAME
Rule 8     extends_declaration -> <empty>
Rule 9     implement_declarations -> IMPLEMENTS interfaces
Rule 10    implement_declarations -> <empty>
Rule 11    interfaces -> NAME , interfaces
Rule 12    interfaces -> NAME
Rule 13    class_body_elements -> class_body_elements class_body_element
Rule 14    class_body_elements -> class_body_element
Rule 15    class_body_element -> field_declaration
Rule 16    class_body_element -> method_declaration
Rule 17    class_body_element -> constructor_declaration
Rule 18    method_declaration -> modifiers VOID NAME ( ) { }
Rule 19    method_declaration -> modifiers VOID NAME ( arguments_declaration ) { }
Rule 20    method_declaration -> modifiers NAME NAME ( ) { }
Rule 21    method_declaration -> modifiers NAME NAME ( arguments_declaration ) { }
Rule 22    method_declaration -> modifiers primitive_type NAME ( ) { }
Rule 23    method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { }
Rule 24    constructor_declaration -> modifiers NAME ( ) { }
Rule 25    constructor_declaration -> modifiers NAME ( arguments_declaration ) { }
Rule 26    arguments_declaration -> argument , arguments_declaration
Rule 27    arguments_declaration -> argument
Rule 28    argument -> primitive_type NAME
Rule 29    argument -> NAME NAME
Rule 30    field_declaration -> primitive_type_declaration
Rule 31    field_declaration -> list_type_declaration
Rule 32    field_declaration -> having_type_declaration
Rule 33    field_declaration -> array_type_declaration
Rule 34    primitive_type_declaration -> modifiers primitive_type NAME ;
Rule 35    list_type_declaration -> modifiers NAME < NAME > NAME ;
Rule 36    having_type_declaration -> modifiers NAME NAME ;
Rule 37    array_type_declaration -> modifiers primitive_type [ ] NAME ;
Rule 38    array_type_declaration -> modifiers primitive_type NAME [ ] ;
Rule 39    array_type_declaration -> modifiers NAME [ ] NAME ;
Rule 40    array_type_declaration -> modifiers NAME NAME [ ] ;
Rule 41    primitive_type -> INT
Rule 42    primitive_type -> FLOAT
Rule 43    primitive_type -> SHORT
Rule 44    primitive_type -> CHAR
Rule 45    primitive_type -> STRING
Rule 46    primitive_type -> BYTE
Rule 47    primitive_type -> LONG
Rule 48    primitive_type -> DOUBLE
Rule 49    modifiers -> modifier
Rule 50    modifiers -> modifiers modifier
Rule 51    modifier -> PUBLIC
Rule 52    modifier -> PROTECTED
Rule 53    modifier -> PRIVATE
Rule 54    modifier -> STATIC
Rule 55    modifier -> ABSTRACT
Rule 56    modifier -> FINAL
Rule 57    modifier -> <empty>

Terminals, with rules where they appear

(                    : 18 19 20 21 22 23 24 25
)                    : 18 19 20 21 22 23 24 25
,                    : 11 26
;                    : 2 5 34 35 36 37 38 39 40
<                    : 35
>                    : 35
ABSTRACT             : 55
BLOCK_COMMENT        : 
BOOLEAN              : 
BYTE                 : 46
CHAR                 : 44
CHAR_LITERAL         : 
CLASS                : 6
DOUBLE               : 48
EXTENDS              : 7
FALSE                : 
FINAL                : 56
FLOAT                : 42
IMPLEMENTS           : 9
IMPORT               : 5
INT                  : 41
LINE_COMMENT         : 
LONG                 : 47
NAME                 : 2 5 6 7 11 12 18 19 20 20 21 21 22 23 24 25 28 29 29 34 35 35 35 36 36 37 38 39 39 40 40
NULL                 : 
NUM                  : 
PACKAGE              : 2
PRIVATE              : 53
PROTECTED            : 52
PUBLIC               : 51
SHORT                : 43
STATIC               : 54
STRING               : 45
STRING_LITERAL       : 
SUPER                : 
THROWS               : 
TRUE                 : 
VOID                 : 18 19
[                    : 37 38 39 40
]                    : 37 38 39 40
error                : 
{                    : 6 18 19 20 21 22 23 24 25
}                    : 6 18 19 20 21 22 23 24 25

Nonterminals, with rules where they appear

argument             : 26 27
arguments_declaration : 19 21 23 25 26
array_type_declaration : 33
class_body_element   : 13 14
class_body_elements  : 6 13
class_declaration    : 1
constructor_declaration : 17
extends_declaration  : 6
field_declaration    : 15
having_type_declaration : 32
implement_declarations : 6
import_declaration   : 3 4
imports_declaration  : 1 3
interfaces           : 9 11
list_type_declaration : 31
method_declaration   : 16
modifier             : 49 50
modifiers            : 6 18 19 20 21 22 23 24 25 34 35 36 37 38 39 40 50
package_declaration  : 1
primitive_type       : 22 23 28 34 37 38
primitive_type_declaration : 30
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . package_declaration imports_declaration class_declaration
    (2) package_declaration -> . PACKAGE NAME ;

    PACKAGE         shift and go to state 3

    start                          shift and go to state 1
    package_declaration            shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> package_declaration . imports_declaration class_declaration
    (3) imports_declaration -> . imports_declaration import_declaration
    (4) imports_declaration -> . import_declaration
    (5) import_declaration -> . IMPORT NAME ;

    IMPORT          shift and go to state 6

    imports_declaration            shift and go to state 4
    import_declaration             shift and go to state 5

state 3

    (2) package_declaration -> PACKAGE . NAME ;

    NAME            shift and go to state 7


state 4

    (1) start -> package_declaration imports_declaration . class_declaration
    (3) imports_declaration -> imports_declaration . import_declaration
    (6) class_declaration -> . modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements }
    (5) import_declaration -> . IMPORT NAME ;
    (49) modifiers -> . modifier
    (50) modifiers -> . modifiers modifier
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> .

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
    IMPORT          shift and go to state 6
    PUBLIC          shift and go to state 12
    PROTECTED       shift and go to state 13
    PRIVATE         shift and go to state 14
    STATIC          shift and go to state 15
    ABSTRACT        shift and go to state 16
    FINAL           shift and go to state 17
    CLASS           reduce using rule 57 (modifier -> .)

  ! PUBLIC          [ reduce using rule 57 (modifier -> .) ]
  ! PROTECTED       [ reduce using rule 57 (modifier -> .) ]
  ! PRIVATE         [ reduce using rule 57 (modifier -> .) ]
  ! STATIC          [ reduce using rule 57 (modifier -> .) ]
  ! ABSTRACT        [ reduce using rule 57 (modifier -> .) ]
  ! FINAL           [ reduce using rule 57 (modifier -> .) ]

    class_declaration              shift and go to state 8
    import_declaration             shift and go to state 9
    modifiers                      shift and go to state 10
    modifier                       shift and go to state 11

state 5

    (4) imports_declaration -> import_declaration .

    IMPORT          reduce using rule 4 (imports_declaration -> import_declaration .)
    PUBLIC          reduce using rule 4 (imports_declaration -> import_declaration .)
    PROTECTED       reduce using rule 4 (imports_declaration -> import_declaration .)
    PRIVATE         reduce using rule 4 (imports_declaration -> import_declaration .)
    STATIC          reduce using rule 4 (imports_declaration -> import_declaration .)
    ABSTRACT        reduce using rule 4 (imports_declaration -> import_declaration .)
    FINAL           reduce using rule 4 (imports_declaration -> import_declaration .)
    CLASS           reduce using rule 4 (imports_declaration -> import_declaration .)


state 6

    (5) import_declaration -> IMPORT . NAME ;

    NAME            shift and go to state 18


state 7

    (2) package_declaration -> PACKAGE NAME . ;

    ;               shift and go to state 19


state 8

    (1) start -> package_declaration imports_declaration class_declaration .

    $end            reduce using rule 1 (start -> package_declaration imports_declaration class_declaration .)


state 9

    (3) imports_declaration -> imports_declaration import_declaration .

    IMPORT          reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    PUBLIC          reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    PROTECTED       reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    PRIVATE         reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    STATIC          reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    ABSTRACT        reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    FINAL           reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)
    CLASS           reduce using rule 3 (imports_declaration -> imports_declaration import_declaration .)


state 10

    (6) class_declaration -> modifiers . CLASS NAME extends_declaration implement_declarations { class_body_elements }
    (50) modifiers -> modifiers . modifier
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> .

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
    CLASS           shift and go to state 20
    PUBLIC          shift and go to state 12
    PROTECTED       shift and go to state 13
    PRIVATE         shift and go to state 14
    STATIC          shift and go to state 15
    ABSTRACT        shift and go to state 16
    FINAL           shift and go to state 17

  ! CLASS           [ reduce using rule 57 (modifier -> .) ]
  ! PUBLIC          [ reduce using rule 57 (modifier -> .) ]
  ! PROTECTED       [ reduce using rule 57 (modifier -> .) ]
  ! PRIVATE         [ reduce using rule 57 (modifier -> .) ]
  ! STATIC          [ reduce using rule 57 (modifier -> .) ]
  ! ABSTRACT        [ reduce using rule 57 (modifier -> .) ]
  ! FINAL           [ reduce using rule 57 (modifier -> .) ]

    modifier                       shift and go to state 21

state 11

    (49) modifiers -> modifier .

    CLASS           reduce using rule 49 (modifiers -> modifier .)
    PUBLIC          reduce using rule 49 (modifiers -> modifier .)
    PROTECTED       reduce using rule 49 (modifiers -> modifier .)
    PRIVATE         reduce using rule 49 (modifiers -> modifier .)
    STATIC          reduce using rule 49 (modifiers -> modifier .)
    ABSTRACT        reduce using rule 49 (modifiers -> modifier .)
    FINAL           reduce using rule 49 (modifiers -> modifier .)
    VOID            reduce using rule 49 (modifiers -> modifier .)
    NAME            reduce using rule 49 (modifiers -> modifier .)
    INT             reduce using rule 49 (modifiers -> modifier .)
    FLOAT           reduce using rule 49 (modifiers -> modifier .)
    SHORT           reduce using rule 49 (modifiers -> modifier .)
    CHAR            reduce using rule 49 (modifiers -> modifier .)
    STRING          reduce using rule 49 (modifiers -> modifier .)
    BYTE            reduce using rule 49 (modifiers -> modifier .)
    LONG            reduce using rule 49 (modifiers -> modifier .)
    DOUBLE          reduce using rule 49 (modifiers -> modifier .)


state 12

    (51) modifier -> PUBLIC .

    CLASS           reduce using rule 51 (modifier -> PUBLIC .)
    PUBLIC          reduce using rule 51 (modifier -> PUBLIC .)
    PROTECTED       reduce using rule 51 (modifier -> PUBLIC .)
    PRIVATE         reduce using rule 51 (modifier -> PUBLIC .)
    STATIC          reduce using rule 51 (modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 51 (modifier -> PUBLIC .)
    FINAL           reduce using rule 51 (modifier -> PUBLIC .)
    VOID            reduce using rule 51 (modifier -> PUBLIC .)
    NAME            reduce using rule 51 (modifier -> PUBLIC .)
    INT             reduce using rule 51 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 51 (modifier -> PUBLIC .)
    SHORT           reduce using rule 51 (modifier -> PUBLIC .)
    CHAR            reduce using rule 51 (modifier -> PUBLIC .)
    STRING          reduce using rule 51 (modifier -> PUBLIC .)
    BYTE            reduce using rule 51 (modifier -> PUBLIC .)
    LONG            reduce using rule 51 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 51 (modifier -> PUBLIC .)


state 13

    (52) modifier -> PROTECTED .

    CLASS           reduce using rule 52 (modifier -> PROTECTED .)
    PUBLIC          reduce using rule 52 (modifier -> PROTECTED .)
    PROTECTED       reduce using rule 52 (modifier -> PROTECTED .)
    PRIVATE         reduce using rule 52 (modifier -> PROTECTED .)
    STATIC          reduce using rule 52 (modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 52 (modifier -> PROTECTED .)
    FINAL           reduce using rule 52 (modifier -> PROTECTED .)
    VOID            reduce using rule 52 (modifier -> PROTECTED .)
    NAME            reduce using rule 52 (modifier -> PROTECTED .)
    INT             reduce using rule 52 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 52 (modifier -> PROTECTED .)
    SHORT           reduce using rule 52 (modifier -> PROTECTED .)
    CHAR            reduce using rule 52 (modifier -> PROTECTED .)
    STRING          reduce using rule 52 (modifier -> PROTECTED .)
    BYTE            reduce using rule 52 (modifier -> PROTECTED .)
    LONG            reduce using rule 52 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 52 (modifier -> PROTECTED .)


state 14

    (53) modifier -> PRIVATE .

    CLASS           reduce using rule 53 (modifier -> PRIVATE .)
    PUBLIC          reduce using rule 53 (modifier -> PRIVATE .)
    PROTECTED       reduce using rule 53 (modifier -> PRIVATE .)
    PRIVATE         reduce using rule 53 (modifier -> PRIVATE .)
    STATIC          reduce using rule 53 (modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 53 (modifier -> PRIVATE .)
    FINAL           reduce using rule 53 (modifier -> PRIVATE .)
    VOID            reduce using rule 53 (modifier -> PRIVATE .)
    NAME            reduce using rule 53 (modifier -> PRIVATE .)
    INT             reduce using rule 53 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 53 (modifier -> PRIVATE .)
    SHORT           reduce using rule 53 (modifier -> PRIVATE .)
    CHAR            reduce using rule 53 (modifier -> PRIVATE .)
    STRING          reduce using rule 53 (modifier -> PRIVATE .)
    BYTE            reduce using rule 53 (modifier -> PRIVATE .)
    LONG            reduce using rule 53 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 53 (modifier -> PRIVATE .)


state 15

    (54) modifier -> STATIC .

    CLASS           reduce using rule 54 (modifier -> STATIC .)
    PUBLIC          reduce using rule 54 (modifier -> STATIC .)
    PROTECTED       reduce using rule 54 (modifier -> STATIC .)
    PRIVATE         reduce using rule 54 (modifier -> STATIC .)
    STATIC          reduce using rule 54 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 54 (modifier -> STATIC .)
    FINAL           reduce using rule 54 (modifier -> STATIC .)
    VOID            reduce using rule 54 (modifier -> STATIC .)
    NAME            reduce using rule 54 (modifier -> STATIC .)
    INT             reduce using rule 54 (modifier -> STATIC .)
    FLOAT           reduce using rule 54 (modifier -> STATIC .)
    SHORT           reduce using rule 54 (modifier -> STATIC .)
    CHAR            reduce using rule 54 (modifier -> STATIC .)
    STRING          reduce using rule 54 (modifier -> STATIC .)
    BYTE            reduce using rule 54 (modifier -> STATIC .)
    LONG            reduce using rule 54 (modifier -> STATIC .)
    DOUBLE          reduce using rule 54 (modifier -> STATIC .)


state 16

    (55) modifier -> ABSTRACT .

    CLASS           reduce using rule 55 (modifier -> ABSTRACT .)
    PUBLIC          reduce using rule 55 (modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 55 (modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 55 (modifier -> ABSTRACT .)
    STATIC          reduce using rule 55 (modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 55 (modifier -> ABSTRACT .)
    FINAL           reduce using rule 55 (modifier -> ABSTRACT .)
    VOID            reduce using rule 55 (modifier -> ABSTRACT .)
    NAME            reduce using rule 55 (modifier -> ABSTRACT .)
    INT             reduce using rule 55 (modifier -> ABSTRACT .)
    FLOAT           reduce using rule 55 (modifier -> ABSTRACT .)
    SHORT           reduce using rule 55 (modifier -> ABSTRACT .)
    CHAR            reduce using rule 55 (modifier -> ABSTRACT .)
    STRING          reduce using rule 55 (modifier -> ABSTRACT .)
    BYTE            reduce using rule 55 (modifier -> ABSTRACT .)
    LONG            reduce using rule 55 (modifier -> ABSTRACT .)
    DOUBLE          reduce using rule 55 (modifier -> ABSTRACT .)


state 17

    (56) modifier -> FINAL .

    CLASS           reduce using rule 56 (modifier -> FINAL .)
    PUBLIC          reduce using rule 56 (modifier -> FINAL .)
    PROTECTED       reduce using rule 56 (modifier -> FINAL .)
    PRIVATE         reduce using rule 56 (modifier -> FINAL .)
    STATIC          reduce using rule 56 (modifier -> FINAL .)
    ABSTRACT        reduce using rule 56 (modifier -> FINAL .)
    FINAL           reduce using rule 56 (modifier -> FINAL .)
    VOID            reduce using rule 56 (modifier -> FINAL .)
    NAME            reduce using rule 56 (modifier -> FINAL .)
    INT             reduce using rule 56 (modifier -> FINAL .)
    FLOAT           reduce using rule 56 (modifier -> FINAL .)
    SHORT           reduce using rule 56 (modifier -> FINAL .)
    CHAR            reduce using rule 56 (modifier -> FINAL .)
    STRING          reduce using rule 56 (modifier -> FINAL .)
    BYTE            reduce using rule 56 (modifier -> FINAL .)
    LONG            reduce using rule 56 (modifier -> FINAL .)
    DOUBLE          reduce using rule 56 (modifier -> FINAL .)


state 18

    (5) import_declaration -> IMPORT NAME . ;

    ;               shift and go to state 22


state 19

    (2) package_declaration -> PACKAGE NAME ; .

    IMPORT          reduce using rule 2 (package_declaration -> PACKAGE NAME ; .)


state 20

    (6) class_declaration -> modifiers CLASS . NAME extends_declaration implement_declarations { class_body_elements }

    NAME            shift and go to state 23


state 21

    (50) modifiers -> modifiers modifier .

    CLASS           reduce using rule 50 (modifiers -> modifiers modifier .)
    PUBLIC          reduce using rule 50 (modifiers -> modifiers modifier .)
    PROTECTED       reduce using rule 50 (modifiers -> modifiers modifier .)
    PRIVATE         reduce using rule 50 (modifiers -> modifiers modifier .)
    STATIC          reduce using rule 50 (modifiers -> modifiers modifier .)
    ABSTRACT        reduce using rule 50 (modifiers -> modifiers modifier .)
    FINAL           reduce using rule 50 (modifiers -> modifiers modifier .)
    VOID            reduce using rule 50 (modifiers -> modifiers modifier .)
    NAME            reduce using rule 50 (modifiers -> modifiers modifier .)
    INT             reduce using rule 50 (modifiers -> modifiers modifier .)
    FLOAT           reduce using rule 50 (modifiers -> modifiers modifier .)
    SHORT           reduce using rule 50 (modifiers -> modifiers modifier .)
    CHAR            reduce using rule 50 (modifiers -> modifiers modifier .)
    STRING          reduce using rule 50 (modifiers -> modifiers modifier .)
    BYTE            reduce using rule 50 (modifiers -> modifiers modifier .)
    LONG            reduce using rule 50 (modifiers -> modifiers modifier .)
    DOUBLE          reduce using rule 50 (modifiers -> modifiers modifier .)


state 22

    (5) import_declaration -> IMPORT NAME ; .

    IMPORT          reduce using rule 5 (import_declaration -> IMPORT NAME ; .)
    PUBLIC          reduce using rule 5 (import_declaration -> IMPORT NAME ; .)
    PROTECTED       reduce using rule 5 (import_declaration -> IMPORT NAME ; .)
    PRIVATE         reduce using rule 5 (import_declaration -> IMPORT NAME ; .)
    STATIC          reduce using rule 5 (import_declaration -> IMPORT NAME ; .)
    ABSTRACT        reduce using rule 5 (import_declaration -> IMPORT NAME ; .)
    FINAL           reduce using rule 5 (import_declaration -> IMPORT NAME ; .)
    CLASS           reduce using rule 5 (import_declaration -> IMPORT NAME ; .)


state 23

    (6) class_declaration -> modifiers CLASS NAME . extends_declaration implement_declarations { class_body_elements }
    (7) extends_declaration -> . EXTENDS NAME
    (8) extends_declaration -> .

    EXTENDS         shift and go to state 25
    IMPLEMENTS      reduce using rule 8 (extends_declaration -> .)
    {               reduce using rule 8 (extends_declaration -> .)

    extends_declaration            shift and go to state 24

state 24

    (6) class_declaration -> modifiers CLASS NAME extends_declaration . implement_declarations { class_body_elements }
    (9) implement_declarations -> . IMPLEMENTS interfaces
    (10) implement_declarations -> .

    IMPLEMENTS      shift and go to state 27
    {               reduce using rule 10 (implement_declarations -> .)

    implement_declarations         shift and go to state 26

state 25

    (7) extends_declaration -> EXTENDS . NAME

    NAME            shift and go to state 28


state 26

    (6) class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations . { class_body_elements }

    {               shift and go to state 29


state 27

    (9) implement_declarations -> IMPLEMENTS . interfaces
    (11) interfaces -> . NAME , interfaces
    (12) interfaces -> . NAME

    NAME            shift and go to state 31

    interfaces                     shift and go to state 30

state 28

    (7) extends_declaration -> EXTENDS NAME .

    IMPLEMENTS      reduce using rule 7 (extends_declaration -> EXTENDS NAME .)
    {               reduce using rule 7 (extends_declaration -> EXTENDS NAME .)


state 29

    (6) class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { . class_body_elements }
    (13) class_body_elements -> . class_body_elements class_body_element
    (14) class_body_elements -> . class_body_element
    (15) class_body_element -> . field_declaration
    (16) class_body_element -> . method_declaration
    (17) class_body_element -> . constructor_declaration
    (30) field_declaration -> . primitive_type_declaration
    (31) field_declaration -> . list_type_declaration
    (32) field_declaration -> . having_type_declaration
    (33) field_declaration -> . array_type_declaration
    (18) method_declaration -> . modifiers VOID NAME ( ) { }
    (19) method_declaration -> . modifiers VOID NAME ( arguments_declaration ) { }
    (20) method_declaration -> . modifiers NAME NAME ( ) { }
    (21) method_declaration -> . modifiers NAME NAME ( arguments_declaration ) { }
    (22) method_declaration -> . modifiers primitive_type NAME ( ) { }
    (23) method_declaration -> . modifiers primitive_type NAME ( arguments_declaration ) { }
    (24) constructor_declaration -> . modifiers NAME ( ) { }
    (25) constructor_declaration -> . modifiers NAME ( arguments_declaration ) { }
    (34) primitive_type_declaration -> . modifiers primitive_type NAME ;
    (35) list_type_declaration -> . modifiers NAME < NAME > NAME ;
    (36) having_type_declaration -> . modifiers NAME NAME ;
    (37) array_type_declaration -> . modifiers primitive_type [ ] NAME ;
    (38) array_type_declaration -> . modifiers primitive_type NAME [ ] ;
    (39) array_type_declaration -> . modifiers NAME [ ] NAME ;
    (40) array_type_declaration -> . modifiers NAME NAME [ ] ;
    (49) modifiers -> . modifier
    (50) modifiers -> . modifiers modifier
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> .

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
    PUBLIC          shift and go to state 12
    PROTECTED       shift and go to state 13
    PRIVATE         shift and go to state 14
    STATIC          shift and go to state 15
    ABSTRACT        shift and go to state 16
    FINAL           shift and go to state 17
    VOID            reduce using rule 57 (modifier -> .)
    NAME            reduce using rule 57 (modifier -> .)
    INT             reduce using rule 57 (modifier -> .)
    FLOAT           reduce using rule 57 (modifier -> .)
    SHORT           reduce using rule 57 (modifier -> .)
    CHAR            reduce using rule 57 (modifier -> .)
    STRING          reduce using rule 57 (modifier -> .)
    BYTE            reduce using rule 57 (modifier -> .)
    LONG            reduce using rule 57 (modifier -> .)
    DOUBLE          reduce using rule 57 (modifier -> .)

  ! PUBLIC          [ reduce using rule 57 (modifier -> .) ]
  ! PROTECTED       [ reduce using rule 57 (modifier -> .) ]
  ! PRIVATE         [ reduce using rule 57 (modifier -> .) ]
  ! STATIC          [ reduce using rule 57 (modifier -> .) ]
  ! ABSTRACT        [ reduce using rule 57 (modifier -> .) ]
  ! FINAL           [ reduce using rule 57 (modifier -> .) ]

    modifiers                      shift and go to state 32
    class_body_elements            shift and go to state 33
    class_body_element             shift and go to state 34
    field_declaration              shift and go to state 35
    method_declaration             shift and go to state 36
    constructor_declaration        shift and go to state 37
    primitive_type_declaration     shift and go to state 38
    list_type_declaration          shift and go to state 39
    having_type_declaration        shift and go to state 40
    array_type_declaration         shift and go to state 41
    modifier                       shift and go to state 11

state 30

    (9) implement_declarations -> IMPLEMENTS interfaces .

    {               reduce using rule 9 (implement_declarations -> IMPLEMENTS interfaces .)


state 31

    (11) interfaces -> NAME . , interfaces
    (12) interfaces -> NAME .

    ,               shift and go to state 42
    {               reduce using rule 12 (interfaces -> NAME .)


state 32

    (18) method_declaration -> modifiers . VOID NAME ( ) { }
    (19) method_declaration -> modifiers . VOID NAME ( arguments_declaration ) { }
    (20) method_declaration -> modifiers . NAME NAME ( ) { }
    (21) method_declaration -> modifiers . NAME NAME ( arguments_declaration ) { }
    (22) method_declaration -> modifiers . primitive_type NAME ( ) { }
    (23) method_declaration -> modifiers . primitive_type NAME ( arguments_declaration ) { }
    (24) constructor_declaration -> modifiers . NAME ( ) { }
    (25) constructor_declaration -> modifiers . NAME ( arguments_declaration ) { }
    (34) primitive_type_declaration -> modifiers . primitive_type NAME ;
    (35) list_type_declaration -> modifiers . NAME < NAME > NAME ;
    (36) having_type_declaration -> modifiers . NAME NAME ;
    (37) array_type_declaration -> modifiers . primitive_type [ ] NAME ;
    (38) array_type_declaration -> modifiers . primitive_type NAME [ ] ;
    (39) array_type_declaration -> modifiers . NAME [ ] NAME ;
    (40) array_type_declaration -> modifiers . NAME NAME [ ] ;
    (50) modifiers -> modifiers . modifier
    (41) primitive_type -> . INT
    (42) primitive_type -> . FLOAT
    (43) primitive_type -> . SHORT
    (44) primitive_type -> . CHAR
    (45) primitive_type -> . STRING
    (46) primitive_type -> . BYTE
    (47) primitive_type -> . LONG
    (48) primitive_type -> . DOUBLE
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> .

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
    VOID            shift and go to state 43
    NAME            shift and go to state 44
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    SHORT           shift and go to state 48
    CHAR            shift and go to state 49
    STRING          shift and go to state 50
    BYTE            shift and go to state 51
    LONG            shift and go to state 52
    DOUBLE          shift and go to state 53
    PUBLIC          shift and go to state 12
    PROTECTED       shift and go to state 13
    PRIVATE         shift and go to state 14
    STATIC          shift and go to state 15
    ABSTRACT        shift and go to state 16
    FINAL           shift and go to state 17

  ! VOID            [ reduce using rule 57 (modifier -> .) ]
  ! NAME            [ reduce using rule 57 (modifier -> .) ]
  ! INT             [ reduce using rule 57 (modifier -> .) ]
  ! FLOAT           [ reduce using rule 57 (modifier -> .) ]
  ! SHORT           [ reduce using rule 57 (modifier -> .) ]
  ! CHAR            [ reduce using rule 57 (modifier -> .) ]
  ! STRING          [ reduce using rule 57 (modifier -> .) ]
  ! BYTE            [ reduce using rule 57 (modifier -> .) ]
  ! LONG            [ reduce using rule 57 (modifier -> .) ]
  ! DOUBLE          [ reduce using rule 57 (modifier -> .) ]
  ! PUBLIC          [ reduce using rule 57 (modifier -> .) ]
  ! PROTECTED       [ reduce using rule 57 (modifier -> .) ]
  ! PRIVATE         [ reduce using rule 57 (modifier -> .) ]
  ! STATIC          [ reduce using rule 57 (modifier -> .) ]
  ! ABSTRACT        [ reduce using rule 57 (modifier -> .) ]
  ! FINAL           [ reduce using rule 57 (modifier -> .) ]

    primitive_type                 shift and go to state 45
    modifier                       shift and go to state 21

state 33

    (6) class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements . }
    (13) class_body_elements -> class_body_elements . class_body_element
    (15) class_body_element -> . field_declaration
    (16) class_body_element -> . method_declaration
    (17) class_body_element -> . constructor_declaration
    (30) field_declaration -> . primitive_type_declaration
    (31) field_declaration -> . list_type_declaration
    (32) field_declaration -> . having_type_declaration
    (33) field_declaration -> . array_type_declaration
    (18) method_declaration -> . modifiers VOID NAME ( ) { }
    (19) method_declaration -> . modifiers VOID NAME ( arguments_declaration ) { }
    (20) method_declaration -> . modifiers NAME NAME ( ) { }
    (21) method_declaration -> . modifiers NAME NAME ( arguments_declaration ) { }
    (22) method_declaration -> . modifiers primitive_type NAME ( ) { }
    (23) method_declaration -> . modifiers primitive_type NAME ( arguments_declaration ) { }
    (24) constructor_declaration -> . modifiers NAME ( ) { }
    (25) constructor_declaration -> . modifiers NAME ( arguments_declaration ) { }
    (34) primitive_type_declaration -> . modifiers primitive_type NAME ;
    (35) list_type_declaration -> . modifiers NAME < NAME > NAME ;
    (36) having_type_declaration -> . modifiers NAME NAME ;
    (37) array_type_declaration -> . modifiers primitive_type [ ] NAME ;
    (38) array_type_declaration -> . modifiers primitive_type NAME [ ] ;
    (39) array_type_declaration -> . modifiers NAME [ ] NAME ;
    (40) array_type_declaration -> . modifiers NAME NAME [ ] ;
    (49) modifiers -> . modifier
    (50) modifiers -> . modifiers modifier
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> .

  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for ABSTRACT resolved as shift
  ! shift/reduce conflict for FINAL resolved as shift
    }               shift and go to state 54
    PUBLIC          shift and go to state 12
    PROTECTED       shift and go to state 13
    PRIVATE         shift and go to state 14
    STATIC          shift and go to state 15
    ABSTRACT        shift and go to state 16
    FINAL           shift and go to state 17
    VOID            reduce using rule 57 (modifier -> .)
    NAME            reduce using rule 57 (modifier -> .)
    INT             reduce using rule 57 (modifier -> .)
    FLOAT           reduce using rule 57 (modifier -> .)
    SHORT           reduce using rule 57 (modifier -> .)
    CHAR            reduce using rule 57 (modifier -> .)
    STRING          reduce using rule 57 (modifier -> .)
    BYTE            reduce using rule 57 (modifier -> .)
    LONG            reduce using rule 57 (modifier -> .)
    DOUBLE          reduce using rule 57 (modifier -> .)

  ! PUBLIC          [ reduce using rule 57 (modifier -> .) ]
  ! PROTECTED       [ reduce using rule 57 (modifier -> .) ]
  ! PRIVATE         [ reduce using rule 57 (modifier -> .) ]
  ! STATIC          [ reduce using rule 57 (modifier -> .) ]
  ! ABSTRACT        [ reduce using rule 57 (modifier -> .) ]
  ! FINAL           [ reduce using rule 57 (modifier -> .) ]

    modifiers                      shift and go to state 32
    class_body_element             shift and go to state 55
    field_declaration              shift and go to state 35
    method_declaration             shift and go to state 36
    constructor_declaration        shift and go to state 37
    primitive_type_declaration     shift and go to state 38
    list_type_declaration          shift and go to state 39
    having_type_declaration        shift and go to state 40
    array_type_declaration         shift and go to state 41
    modifier                       shift and go to state 11

state 34

    (14) class_body_elements -> class_body_element .

    }               reduce using rule 14 (class_body_elements -> class_body_element .)
    PUBLIC          reduce using rule 14 (class_body_elements -> class_body_element .)
    PROTECTED       reduce using rule 14 (class_body_elements -> class_body_element .)
    PRIVATE         reduce using rule 14 (class_body_elements -> class_body_element .)
    STATIC          reduce using rule 14 (class_body_elements -> class_body_element .)
    ABSTRACT        reduce using rule 14 (class_body_elements -> class_body_element .)
    FINAL           reduce using rule 14 (class_body_elements -> class_body_element .)
    VOID            reduce using rule 14 (class_body_elements -> class_body_element .)
    NAME            reduce using rule 14 (class_body_elements -> class_body_element .)
    INT             reduce using rule 14 (class_body_elements -> class_body_element .)
    FLOAT           reduce using rule 14 (class_body_elements -> class_body_element .)
    SHORT           reduce using rule 14 (class_body_elements -> class_body_element .)
    CHAR            reduce using rule 14 (class_body_elements -> class_body_element .)
    STRING          reduce using rule 14 (class_body_elements -> class_body_element .)
    BYTE            reduce using rule 14 (class_body_elements -> class_body_element .)
    LONG            reduce using rule 14 (class_body_elements -> class_body_element .)
    DOUBLE          reduce using rule 14 (class_body_elements -> class_body_element .)


state 35

    (15) class_body_element -> field_declaration .

    }               reduce using rule 15 (class_body_element -> field_declaration .)
    PUBLIC          reduce using rule 15 (class_body_element -> field_declaration .)
    PROTECTED       reduce using rule 15 (class_body_element -> field_declaration .)
    PRIVATE         reduce using rule 15 (class_body_element -> field_declaration .)
    STATIC          reduce using rule 15 (class_body_element -> field_declaration .)
    ABSTRACT        reduce using rule 15 (class_body_element -> field_declaration .)
    FINAL           reduce using rule 15 (class_body_element -> field_declaration .)
    VOID            reduce using rule 15 (class_body_element -> field_declaration .)
    NAME            reduce using rule 15 (class_body_element -> field_declaration .)
    INT             reduce using rule 15 (class_body_element -> field_declaration .)
    FLOAT           reduce using rule 15 (class_body_element -> field_declaration .)
    SHORT           reduce using rule 15 (class_body_element -> field_declaration .)
    CHAR            reduce using rule 15 (class_body_element -> field_declaration .)
    STRING          reduce using rule 15 (class_body_element -> field_declaration .)
    BYTE            reduce using rule 15 (class_body_element -> field_declaration .)
    LONG            reduce using rule 15 (class_body_element -> field_declaration .)
    DOUBLE          reduce using rule 15 (class_body_element -> field_declaration .)


state 36

    (16) class_body_element -> method_declaration .

    }               reduce using rule 16 (class_body_element -> method_declaration .)
    PUBLIC          reduce using rule 16 (class_body_element -> method_declaration .)
    PROTECTED       reduce using rule 16 (class_body_element -> method_declaration .)
    PRIVATE         reduce using rule 16 (class_body_element -> method_declaration .)
    STATIC          reduce using rule 16 (class_body_element -> method_declaration .)
    ABSTRACT        reduce using rule 16 (class_body_element -> method_declaration .)
    FINAL           reduce using rule 16 (class_body_element -> method_declaration .)
    VOID            reduce using rule 16 (class_body_element -> method_declaration .)
    NAME            reduce using rule 16 (class_body_element -> method_declaration .)
    INT             reduce using rule 16 (class_body_element -> method_declaration .)
    FLOAT           reduce using rule 16 (class_body_element -> method_declaration .)
    SHORT           reduce using rule 16 (class_body_element -> method_declaration .)
    CHAR            reduce using rule 16 (class_body_element -> method_declaration .)
    STRING          reduce using rule 16 (class_body_element -> method_declaration .)
    BYTE            reduce using rule 16 (class_body_element -> method_declaration .)
    LONG            reduce using rule 16 (class_body_element -> method_declaration .)
    DOUBLE          reduce using rule 16 (class_body_element -> method_declaration .)


state 37

    (17) class_body_element -> constructor_declaration .

    }               reduce using rule 17 (class_body_element -> constructor_declaration .)
    PUBLIC          reduce using rule 17 (class_body_element -> constructor_declaration .)
    PROTECTED       reduce using rule 17 (class_body_element -> constructor_declaration .)
    PRIVATE         reduce using rule 17 (class_body_element -> constructor_declaration .)
    STATIC          reduce using rule 17 (class_body_element -> constructor_declaration .)
    ABSTRACT        reduce using rule 17 (class_body_element -> constructor_declaration .)
    FINAL           reduce using rule 17 (class_body_element -> constructor_declaration .)
    VOID            reduce using rule 17 (class_body_element -> constructor_declaration .)
    NAME            reduce using rule 17 (class_body_element -> constructor_declaration .)
    INT             reduce using rule 17 (class_body_element -> constructor_declaration .)
    FLOAT           reduce using rule 17 (class_body_element -> constructor_declaration .)
    SHORT           reduce using rule 17 (class_body_element -> constructor_declaration .)
    CHAR            reduce using rule 17 (class_body_element -> constructor_declaration .)
    STRING          reduce using rule 17 (class_body_element -> constructor_declaration .)
    BYTE            reduce using rule 17 (class_body_element -> constructor_declaration .)
    LONG            reduce using rule 17 (class_body_element -> constructor_declaration .)
    DOUBLE          reduce using rule 17 (class_body_element -> constructor_declaration .)


state 38

    (30) field_declaration -> primitive_type_declaration .

    }               reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    PUBLIC          reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    PROTECTED       reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    PRIVATE         reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    STATIC          reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    ABSTRACT        reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    FINAL           reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    VOID            reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    NAME            reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    INT             reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    FLOAT           reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    SHORT           reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    CHAR            reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    STRING          reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    BYTE            reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    LONG            reduce using rule 30 (field_declaration -> primitive_type_declaration .)
    DOUBLE          reduce using rule 30 (field_declaration -> primitive_type_declaration .)


state 39

    (31) field_declaration -> list_type_declaration .

    }               reduce using rule 31 (field_declaration -> list_type_declaration .)
    PUBLIC          reduce using rule 31 (field_declaration -> list_type_declaration .)
    PROTECTED       reduce using rule 31 (field_declaration -> list_type_declaration .)
    PRIVATE         reduce using rule 31 (field_declaration -> list_type_declaration .)
    STATIC          reduce using rule 31 (field_declaration -> list_type_declaration .)
    ABSTRACT        reduce using rule 31 (field_declaration -> list_type_declaration .)
    FINAL           reduce using rule 31 (field_declaration -> list_type_declaration .)
    VOID            reduce using rule 31 (field_declaration -> list_type_declaration .)
    NAME            reduce using rule 31 (field_declaration -> list_type_declaration .)
    INT             reduce using rule 31 (field_declaration -> list_type_declaration .)
    FLOAT           reduce using rule 31 (field_declaration -> list_type_declaration .)
    SHORT           reduce using rule 31 (field_declaration -> list_type_declaration .)
    CHAR            reduce using rule 31 (field_declaration -> list_type_declaration .)
    STRING          reduce using rule 31 (field_declaration -> list_type_declaration .)
    BYTE            reduce using rule 31 (field_declaration -> list_type_declaration .)
    LONG            reduce using rule 31 (field_declaration -> list_type_declaration .)
    DOUBLE          reduce using rule 31 (field_declaration -> list_type_declaration .)


state 40

    (32) field_declaration -> having_type_declaration .

    }               reduce using rule 32 (field_declaration -> having_type_declaration .)
    PUBLIC          reduce using rule 32 (field_declaration -> having_type_declaration .)
    PROTECTED       reduce using rule 32 (field_declaration -> having_type_declaration .)
    PRIVATE         reduce using rule 32 (field_declaration -> having_type_declaration .)
    STATIC          reduce using rule 32 (field_declaration -> having_type_declaration .)
    ABSTRACT        reduce using rule 32 (field_declaration -> having_type_declaration .)
    FINAL           reduce using rule 32 (field_declaration -> having_type_declaration .)
    VOID            reduce using rule 32 (field_declaration -> having_type_declaration .)
    NAME            reduce using rule 32 (field_declaration -> having_type_declaration .)
    INT             reduce using rule 32 (field_declaration -> having_type_declaration .)
    FLOAT           reduce using rule 32 (field_declaration -> having_type_declaration .)
    SHORT           reduce using rule 32 (field_declaration -> having_type_declaration .)
    CHAR            reduce using rule 32 (field_declaration -> having_type_declaration .)
    STRING          reduce using rule 32 (field_declaration -> having_type_declaration .)
    BYTE            reduce using rule 32 (field_declaration -> having_type_declaration .)
    LONG            reduce using rule 32 (field_declaration -> having_type_declaration .)
    DOUBLE          reduce using rule 32 (field_declaration -> having_type_declaration .)


state 41

    (33) field_declaration -> array_type_declaration .

    }               reduce using rule 33 (field_declaration -> array_type_declaration .)
    PUBLIC          reduce using rule 33 (field_declaration -> array_type_declaration .)
    PROTECTED       reduce using rule 33 (field_declaration -> array_type_declaration .)
    PRIVATE         reduce using rule 33 (field_declaration -> array_type_declaration .)
    STATIC          reduce using rule 33 (field_declaration -> array_type_declaration .)
    ABSTRACT        reduce using rule 33 (field_declaration -> array_type_declaration .)
    FINAL           reduce using rule 33 (field_declaration -> array_type_declaration .)
    VOID            reduce using rule 33 (field_declaration -> array_type_declaration .)
    NAME            reduce using rule 33 (field_declaration -> array_type_declaration .)
    INT             reduce using rule 33 (field_declaration -> array_type_declaration .)
    FLOAT           reduce using rule 33 (field_declaration -> array_type_declaration .)
    SHORT           reduce using rule 33 (field_declaration -> array_type_declaration .)
    CHAR            reduce using rule 33 (field_declaration -> array_type_declaration .)
    STRING          reduce using rule 33 (field_declaration -> array_type_declaration .)
    BYTE            reduce using rule 33 (field_declaration -> array_type_declaration .)
    LONG            reduce using rule 33 (field_declaration -> array_type_declaration .)
    DOUBLE          reduce using rule 33 (field_declaration -> array_type_declaration .)


state 42

    (11) interfaces -> NAME , . interfaces
    (11) interfaces -> . NAME , interfaces
    (12) interfaces -> . NAME

    NAME            shift and go to state 31

    interfaces                     shift and go to state 56

state 43

    (18) method_declaration -> modifiers VOID . NAME ( ) { }
    (19) method_declaration -> modifiers VOID . NAME ( arguments_declaration ) { }

    NAME            shift and go to state 57


state 44

    (20) method_declaration -> modifiers NAME . NAME ( ) { }
    (21) method_declaration -> modifiers NAME . NAME ( arguments_declaration ) { }
    (24) constructor_declaration -> modifiers NAME . ( ) { }
    (25) constructor_declaration -> modifiers NAME . ( arguments_declaration ) { }
    (35) list_type_declaration -> modifiers NAME . < NAME > NAME ;
    (36) having_type_declaration -> modifiers NAME . NAME ;
    (39) array_type_declaration -> modifiers NAME . [ ] NAME ;
    (40) array_type_declaration -> modifiers NAME . NAME [ ] ;

    NAME            shift and go to state 58
    (               shift and go to state 59
    <               shift and go to state 60
    [               shift and go to state 61


state 45

    (22) method_declaration -> modifiers primitive_type . NAME ( ) { }
    (23) method_declaration -> modifiers primitive_type . NAME ( arguments_declaration ) { }
    (34) primitive_type_declaration -> modifiers primitive_type . NAME ;
    (37) array_type_declaration -> modifiers primitive_type . [ ] NAME ;
    (38) array_type_declaration -> modifiers primitive_type . NAME [ ] ;

    NAME            shift and go to state 62
    [               shift and go to state 63


state 46

    (41) primitive_type -> INT .

    NAME            reduce using rule 41 (primitive_type -> INT .)
    [               reduce using rule 41 (primitive_type -> INT .)


state 47

    (42) primitive_type -> FLOAT .

    NAME            reduce using rule 42 (primitive_type -> FLOAT .)
    [               reduce using rule 42 (primitive_type -> FLOAT .)


state 48

    (43) primitive_type -> SHORT .

    NAME            reduce using rule 43 (primitive_type -> SHORT .)
    [               reduce using rule 43 (primitive_type -> SHORT .)


state 49

    (44) primitive_type -> CHAR .

    NAME            reduce using rule 44 (primitive_type -> CHAR .)
    [               reduce using rule 44 (primitive_type -> CHAR .)


state 50

    (45) primitive_type -> STRING .

    NAME            reduce using rule 45 (primitive_type -> STRING .)
    [               reduce using rule 45 (primitive_type -> STRING .)


state 51

    (46) primitive_type -> BYTE .

    NAME            reduce using rule 46 (primitive_type -> BYTE .)
    [               reduce using rule 46 (primitive_type -> BYTE .)


state 52

    (47) primitive_type -> LONG .

    NAME            reduce using rule 47 (primitive_type -> LONG .)
    [               reduce using rule 47 (primitive_type -> LONG .)


state 53

    (48) primitive_type -> DOUBLE .

    NAME            reduce using rule 48 (primitive_type -> DOUBLE .)
    [               reduce using rule 48 (primitive_type -> DOUBLE .)


state 54

    (6) class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements } .

    $end            reduce using rule 6 (class_declaration -> modifiers CLASS NAME extends_declaration implement_declarations { class_body_elements } .)


state 55

    (13) class_body_elements -> class_body_elements class_body_element .

    }               reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    PUBLIC          reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    PROTECTED       reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    PRIVATE         reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    STATIC          reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    ABSTRACT        reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    FINAL           reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    VOID            reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    NAME            reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    INT             reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    FLOAT           reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    SHORT           reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    CHAR            reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    STRING          reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    BYTE            reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    LONG            reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)
    DOUBLE          reduce using rule 13 (class_body_elements -> class_body_elements class_body_element .)


state 56

    (11) interfaces -> NAME , interfaces .

    {               reduce using rule 11 (interfaces -> NAME , interfaces .)


state 57

    (18) method_declaration -> modifiers VOID NAME . ( ) { }
    (19) method_declaration -> modifiers VOID NAME . ( arguments_declaration ) { }

    (               shift and go to state 64


state 58

    (20) method_declaration -> modifiers NAME NAME . ( ) { }
    (21) method_declaration -> modifiers NAME NAME . ( arguments_declaration ) { }
    (36) having_type_declaration -> modifiers NAME NAME . ;
    (40) array_type_declaration -> modifiers NAME NAME . [ ] ;

    (               shift and go to state 65
    ;               shift and go to state 66
    [               shift and go to state 67


state 59

    (24) constructor_declaration -> modifiers NAME ( . ) { }
    (25) constructor_declaration -> modifiers NAME ( . arguments_declaration ) { }
    (26) arguments_declaration -> . argument , arguments_declaration
    (27) arguments_declaration -> . argument
    (28) argument -> . primitive_type NAME
    (29) argument -> . NAME NAME
    (41) primitive_type -> . INT
    (42) primitive_type -> . FLOAT
    (43) primitive_type -> . SHORT
    (44) primitive_type -> . CHAR
    (45) primitive_type -> . STRING
    (46) primitive_type -> . BYTE
    (47) primitive_type -> . LONG
    (48) primitive_type -> . DOUBLE

    )               shift and go to state 69
    NAME            shift and go to state 68
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    SHORT           shift and go to state 48
    CHAR            shift and go to state 49
    STRING          shift and go to state 50
    BYTE            shift and go to state 51
    LONG            shift and go to state 52
    DOUBLE          shift and go to state 53

    arguments_declaration          shift and go to state 70
    argument                       shift and go to state 71
    primitive_type                 shift and go to state 72

state 60

    (35) list_type_declaration -> modifiers NAME < . NAME > NAME ;

    NAME            shift and go to state 73


state 61

    (39) array_type_declaration -> modifiers NAME [ . ] NAME ;

    ]               shift and go to state 74


state 62

    (22) method_declaration -> modifiers primitive_type NAME . ( ) { }
    (23) method_declaration -> modifiers primitive_type NAME . ( arguments_declaration ) { }
    (34) primitive_type_declaration -> modifiers primitive_type NAME . ;
    (38) array_type_declaration -> modifiers primitive_type NAME . [ ] ;

    (               shift and go to state 75
    ;               shift and go to state 76
    [               shift and go to state 77


state 63

    (37) array_type_declaration -> modifiers primitive_type [ . ] NAME ;

    ]               shift and go to state 78


state 64

    (18) method_declaration -> modifiers VOID NAME ( . ) { }
    (19) method_declaration -> modifiers VOID NAME ( . arguments_declaration ) { }
    (26) arguments_declaration -> . argument , arguments_declaration
    (27) arguments_declaration -> . argument
    (28) argument -> . primitive_type NAME
    (29) argument -> . NAME NAME
    (41) primitive_type -> . INT
    (42) primitive_type -> . FLOAT
    (43) primitive_type -> . SHORT
    (44) primitive_type -> . CHAR
    (45) primitive_type -> . STRING
    (46) primitive_type -> . BYTE
    (47) primitive_type -> . LONG
    (48) primitive_type -> . DOUBLE

    )               shift and go to state 79
    NAME            shift and go to state 68
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    SHORT           shift and go to state 48
    CHAR            shift and go to state 49
    STRING          shift and go to state 50
    BYTE            shift and go to state 51
    LONG            shift and go to state 52
    DOUBLE          shift and go to state 53

    arguments_declaration          shift and go to state 80
    argument                       shift and go to state 71
    primitive_type                 shift and go to state 72

state 65

    (20) method_declaration -> modifiers NAME NAME ( . ) { }
    (21) method_declaration -> modifiers NAME NAME ( . arguments_declaration ) { }
    (26) arguments_declaration -> . argument , arguments_declaration
    (27) arguments_declaration -> . argument
    (28) argument -> . primitive_type NAME
    (29) argument -> . NAME NAME
    (41) primitive_type -> . INT
    (42) primitive_type -> . FLOAT
    (43) primitive_type -> . SHORT
    (44) primitive_type -> . CHAR
    (45) primitive_type -> . STRING
    (46) primitive_type -> . BYTE
    (47) primitive_type -> . LONG
    (48) primitive_type -> . DOUBLE

    )               shift and go to state 81
    NAME            shift and go to state 68
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    SHORT           shift and go to state 48
    CHAR            shift and go to state 49
    STRING          shift and go to state 50
    BYTE            shift and go to state 51
    LONG            shift and go to state 52
    DOUBLE          shift and go to state 53

    arguments_declaration          shift and go to state 82
    argument                       shift and go to state 71
    primitive_type                 shift and go to state 72

state 66

    (36) having_type_declaration -> modifiers NAME NAME ; .

    }               reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    PUBLIC          reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    PROTECTED       reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    PRIVATE         reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    STATIC          reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    ABSTRACT        reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    FINAL           reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    VOID            reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    NAME            reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    INT             reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    FLOAT           reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    SHORT           reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    CHAR            reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    STRING          reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    BYTE            reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    LONG            reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)
    DOUBLE          reduce using rule 36 (having_type_declaration -> modifiers NAME NAME ; .)


state 67

    (40) array_type_declaration -> modifiers NAME NAME [ . ] ;

    ]               shift and go to state 83


state 68

    (29) argument -> NAME . NAME

    NAME            shift and go to state 84


state 69

    (24) constructor_declaration -> modifiers NAME ( ) . { }

    {               shift and go to state 85


state 70

    (25) constructor_declaration -> modifiers NAME ( arguments_declaration . ) { }

    )               shift and go to state 86


state 71

    (26) arguments_declaration -> argument . , arguments_declaration
    (27) arguments_declaration -> argument .

    ,               shift and go to state 87
    )               reduce using rule 27 (arguments_declaration -> argument .)


state 72

    (28) argument -> primitive_type . NAME

    NAME            shift and go to state 88


state 73

    (35) list_type_declaration -> modifiers NAME < NAME . > NAME ;

    >               shift and go to state 89


state 74

    (39) array_type_declaration -> modifiers NAME [ ] . NAME ;

    NAME            shift and go to state 90


state 75

    (22) method_declaration -> modifiers primitive_type NAME ( . ) { }
    (23) method_declaration -> modifiers primitive_type NAME ( . arguments_declaration ) { }
    (26) arguments_declaration -> . argument , arguments_declaration
    (27) arguments_declaration -> . argument
    (28) argument -> . primitive_type NAME
    (29) argument -> . NAME NAME
    (41) primitive_type -> . INT
    (42) primitive_type -> . FLOAT
    (43) primitive_type -> . SHORT
    (44) primitive_type -> . CHAR
    (45) primitive_type -> . STRING
    (46) primitive_type -> . BYTE
    (47) primitive_type -> . LONG
    (48) primitive_type -> . DOUBLE

    )               shift and go to state 91
    NAME            shift and go to state 68
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    SHORT           shift and go to state 48
    CHAR            shift and go to state 49
    STRING          shift and go to state 50
    BYTE            shift and go to state 51
    LONG            shift and go to state 52
    DOUBLE          shift and go to state 53

    primitive_type                 shift and go to state 72
    arguments_declaration          shift and go to state 92
    argument                       shift and go to state 71

state 76

    (34) primitive_type_declaration -> modifiers primitive_type NAME ; .

    }               reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    PUBLIC          reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    PROTECTED       reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    PRIVATE         reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    STATIC          reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    ABSTRACT        reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    FINAL           reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    VOID            reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    NAME            reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    INT             reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    FLOAT           reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    SHORT           reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    CHAR            reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    STRING          reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    BYTE            reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    LONG            reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)
    DOUBLE          reduce using rule 34 (primitive_type_declaration -> modifiers primitive_type NAME ; .)


state 77

    (38) array_type_declaration -> modifiers primitive_type NAME [ . ] ;

    ]               shift and go to state 93


state 78

    (37) array_type_declaration -> modifiers primitive_type [ ] . NAME ;

    NAME            shift and go to state 94


state 79

    (18) method_declaration -> modifiers VOID NAME ( ) . { }

    {               shift and go to state 95


state 80

    (19) method_declaration -> modifiers VOID NAME ( arguments_declaration . ) { }

    )               shift and go to state 96


state 81

    (20) method_declaration -> modifiers NAME NAME ( ) . { }

    {               shift and go to state 97


state 82

    (21) method_declaration -> modifiers NAME NAME ( arguments_declaration . ) { }

    )               shift and go to state 98


state 83

    (40) array_type_declaration -> modifiers NAME NAME [ ] . ;

    ;               shift and go to state 99


state 84

    (29) argument -> NAME NAME .

    ,               reduce using rule 29 (argument -> NAME NAME .)
    )               reduce using rule 29 (argument -> NAME NAME .)


state 85

    (24) constructor_declaration -> modifiers NAME ( ) { . }

    }               shift and go to state 100


state 86

    (25) constructor_declaration -> modifiers NAME ( arguments_declaration ) . { }

    {               shift and go to state 101


state 87

    (26) arguments_declaration -> argument , . arguments_declaration
    (26) arguments_declaration -> . argument , arguments_declaration
    (27) arguments_declaration -> . argument
    (28) argument -> . primitive_type NAME
    (29) argument -> . NAME NAME
    (41) primitive_type -> . INT
    (42) primitive_type -> . FLOAT
    (43) primitive_type -> . SHORT
    (44) primitive_type -> . CHAR
    (45) primitive_type -> . STRING
    (46) primitive_type -> . BYTE
    (47) primitive_type -> . LONG
    (48) primitive_type -> . DOUBLE

    NAME            shift and go to state 68
    INT             shift and go to state 46
    FLOAT           shift and go to state 47
    SHORT           shift and go to state 48
    CHAR            shift and go to state 49
    STRING          shift and go to state 50
    BYTE            shift and go to state 51
    LONG            shift and go to state 52
    DOUBLE          shift and go to state 53

    argument                       shift and go to state 71
    arguments_declaration          shift and go to state 102
    primitive_type                 shift and go to state 72

state 88

    (28) argument -> primitive_type NAME .

    ,               reduce using rule 28 (argument -> primitive_type NAME .)
    )               reduce using rule 28 (argument -> primitive_type NAME .)


state 89

    (35) list_type_declaration -> modifiers NAME < NAME > . NAME ;

    NAME            shift and go to state 103


state 90

    (39) array_type_declaration -> modifiers NAME [ ] NAME . ;

    ;               shift and go to state 104


state 91

    (22) method_declaration -> modifiers primitive_type NAME ( ) . { }

    {               shift and go to state 105


state 92

    (23) method_declaration -> modifiers primitive_type NAME ( arguments_declaration . ) { }

    )               shift and go to state 106


state 93

    (38) array_type_declaration -> modifiers primitive_type NAME [ ] . ;

    ;               shift and go to state 107


state 94

    (37) array_type_declaration -> modifiers primitive_type [ ] NAME . ;

    ;               shift and go to state 108


state 95

    (18) method_declaration -> modifiers VOID NAME ( ) { . }

    }               shift and go to state 109


state 96

    (19) method_declaration -> modifiers VOID NAME ( arguments_declaration ) . { }

    {               shift and go to state 110


state 97

    (20) method_declaration -> modifiers NAME NAME ( ) { . }

    }               shift and go to state 111


state 98

    (21) method_declaration -> modifiers NAME NAME ( arguments_declaration ) . { }

    {               shift and go to state 112


state 99

    (40) array_type_declaration -> modifiers NAME NAME [ ] ; .

    }               reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    PUBLIC          reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    PROTECTED       reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    PRIVATE         reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    STATIC          reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    ABSTRACT        reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    FINAL           reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    VOID            reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    NAME            reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    INT             reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    FLOAT           reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    SHORT           reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    CHAR            reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    STRING          reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    BYTE            reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    LONG            reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)
    DOUBLE          reduce using rule 40 (array_type_declaration -> modifiers NAME NAME [ ] ; .)


state 100

    (24) constructor_declaration -> modifiers NAME ( ) { } .

    }               reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    PUBLIC          reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    PROTECTED       reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    PRIVATE         reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    STATIC          reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    ABSTRACT        reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    FINAL           reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    VOID            reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    NAME            reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    INT             reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    FLOAT           reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    SHORT           reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    CHAR            reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    STRING          reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    BYTE            reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    LONG            reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)
    DOUBLE          reduce using rule 24 (constructor_declaration -> modifiers NAME ( ) { } .)


state 101

    (25) constructor_declaration -> modifiers NAME ( arguments_declaration ) { . }

    }               shift and go to state 113


state 102

    (26) arguments_declaration -> argument , arguments_declaration .

    )               reduce using rule 26 (arguments_declaration -> argument , arguments_declaration .)


state 103

    (35) list_type_declaration -> modifiers NAME < NAME > NAME . ;

    ;               shift and go to state 114


state 104

    (39) array_type_declaration -> modifiers NAME [ ] NAME ; .

    }               reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    PUBLIC          reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    PROTECTED       reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    PRIVATE         reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    STATIC          reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    ABSTRACT        reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    FINAL           reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    VOID            reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    NAME            reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    INT             reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    FLOAT           reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    SHORT           reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    CHAR            reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    STRING          reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    BYTE            reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    LONG            reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)
    DOUBLE          reduce using rule 39 (array_type_declaration -> modifiers NAME [ ] NAME ; .)


state 105

    (22) method_declaration -> modifiers primitive_type NAME ( ) { . }

    }               shift and go to state 115


state 106

    (23) method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) . { }

    {               shift and go to state 116


state 107

    (38) array_type_declaration -> modifiers primitive_type NAME [ ] ; .

    }               reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    PUBLIC          reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    PROTECTED       reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    PRIVATE         reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    STATIC          reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    ABSTRACT        reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    FINAL           reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    VOID            reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    NAME            reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    INT             reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    FLOAT           reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    SHORT           reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    CHAR            reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    STRING          reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    BYTE            reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    LONG            reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)
    DOUBLE          reduce using rule 38 (array_type_declaration -> modifiers primitive_type NAME [ ] ; .)


state 108

    (37) array_type_declaration -> modifiers primitive_type [ ] NAME ; .

    }               reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    PUBLIC          reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    PROTECTED       reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    PRIVATE         reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    STATIC          reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    ABSTRACT        reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    FINAL           reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    VOID            reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    NAME            reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    INT             reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    FLOAT           reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    SHORT           reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    CHAR            reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    STRING          reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    BYTE            reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    LONG            reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)
    DOUBLE          reduce using rule 37 (array_type_declaration -> modifiers primitive_type [ ] NAME ; .)


state 109

    (18) method_declaration -> modifiers VOID NAME ( ) { } .

    }               reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    PUBLIC          reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    PROTECTED       reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    PRIVATE         reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    STATIC          reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    ABSTRACT        reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    FINAL           reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    VOID            reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    NAME            reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    INT             reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    FLOAT           reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    SHORT           reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    CHAR            reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    STRING          reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    BYTE            reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    LONG            reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)
    DOUBLE          reduce using rule 18 (method_declaration -> modifiers VOID NAME ( ) { } .)


state 110

    (19) method_declaration -> modifiers VOID NAME ( arguments_declaration ) { . }

    }               shift and go to state 117


state 111

    (20) method_declaration -> modifiers NAME NAME ( ) { } .

    }               reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    PUBLIC          reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    PROTECTED       reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    PRIVATE         reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    STATIC          reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    ABSTRACT        reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    FINAL           reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    VOID            reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    NAME            reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    INT             reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    FLOAT           reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    SHORT           reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    CHAR            reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    STRING          reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    BYTE            reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    LONG            reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)
    DOUBLE          reduce using rule 20 (method_declaration -> modifiers NAME NAME ( ) { } .)


state 112

    (21) method_declaration -> modifiers NAME NAME ( arguments_declaration ) { . }

    }               shift and go to state 118


state 113

    (25) constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .

    }               reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    PUBLIC          reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    PROTECTED       reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    PRIVATE         reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    STATIC          reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    ABSTRACT        reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    FINAL           reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    VOID            reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    NAME            reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    INT             reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    FLOAT           reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    SHORT           reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    CHAR            reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    STRING          reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    BYTE            reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    LONG            reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)
    DOUBLE          reduce using rule 25 (constructor_declaration -> modifiers NAME ( arguments_declaration ) { } .)


state 114

    (35) list_type_declaration -> modifiers NAME < NAME > NAME ; .

    }               reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    PUBLIC          reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    PROTECTED       reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    PRIVATE         reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    STATIC          reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    ABSTRACT        reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    FINAL           reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    VOID            reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    NAME            reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    INT             reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    FLOAT           reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    SHORT           reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    CHAR            reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    STRING          reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    BYTE            reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    LONG            reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)
    DOUBLE          reduce using rule 35 (list_type_declaration -> modifiers NAME < NAME > NAME ; .)


state 115

    (22) method_declaration -> modifiers primitive_type NAME ( ) { } .

    }               reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    PUBLIC          reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    PROTECTED       reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    PRIVATE         reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    STATIC          reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    ABSTRACT        reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    FINAL           reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    VOID            reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    NAME            reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    INT             reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    FLOAT           reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    SHORT           reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    CHAR            reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    STRING          reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    BYTE            reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    LONG            reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)
    DOUBLE          reduce using rule 22 (method_declaration -> modifiers primitive_type NAME ( ) { } .)


state 116

    (23) method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { . }

    }               shift and go to state 119


state 117

    (19) method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .

    }               reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    PUBLIC          reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    PROTECTED       reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    PRIVATE         reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    STATIC          reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    ABSTRACT        reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    FINAL           reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    VOID            reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    NAME            reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    INT             reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    FLOAT           reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    SHORT           reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    CHAR            reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    STRING          reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    BYTE            reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    LONG            reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)
    DOUBLE          reduce using rule 19 (method_declaration -> modifiers VOID NAME ( arguments_declaration ) { } .)


state 118

    (21) method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .

    }               reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    PUBLIC          reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    PROTECTED       reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    PRIVATE         reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    STATIC          reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    ABSTRACT        reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    FINAL           reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    VOID            reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    NAME            reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    INT             reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    FLOAT           reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    SHORT           reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    CHAR            reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    STRING          reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    BYTE            reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    LONG            reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)
    DOUBLE          reduce using rule 21 (method_declaration -> modifiers NAME NAME ( arguments_declaration ) { } .)


state 119

    (23) method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .

    }               reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    PUBLIC          reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    PROTECTED       reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    PRIVATE         reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    STATIC          reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    ABSTRACT        reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    FINAL           reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    VOID            reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    NAME            reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    INT             reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    FLOAT           reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    SHORT           reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    CHAR            reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    STRING          reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    BYTE            reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    LONG            reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)
    DOUBLE          reduce using rule 23 (method_declaration -> modifiers primitive_type NAME ( arguments_declaration ) { } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PUBLIC in state 4 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 4 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 4 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 4 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 4 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 4 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 10 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 10 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 10 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 10 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 10 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 10 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 10 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 29 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 29 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 29 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 29 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 29 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 29 resolved as shift
WARNING: shift/reduce conflict for VOID in state 32 resolved as shift
WARNING: shift/reduce conflict for NAME in state 32 resolved as shift
WARNING: shift/reduce conflict for INT in state 32 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 32 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 32 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 32 resolved as shift
WARNING: shift/reduce conflict for STRING in state 32 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 32 resolved as shift
WARNING: shift/reduce conflict for LONG in state 32 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 32 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 32 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 32 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 32 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 32 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 32 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 32 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 33 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 33 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 33 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 33 resolved as shift
WARNING: shift/reduce conflict for ABSTRACT in state 33 resolved as shift
WARNING: shift/reduce conflict for FINAL in state 33 resolved as shift
